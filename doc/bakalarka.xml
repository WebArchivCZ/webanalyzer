<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % fithesis SYSTEM "http://www.fi.muni.cz/~xpavlov/fithesis.mod">
%fithesis;
]>
<book lang="sk" xmlns:fi="http://www.fi.muni.cz/~xpavlov/fithesis">
    <bookinfo>
        <title>Rozpoznanie a archivácia českého webu mimo národnú doménu</title>
        <subtitle>Bakalárska práca</subtitle>
        <author>
            <firstname>Ivan</firstname>
            <surname>Vlček</surname>
            <fi:woman>false</fi:woman>
            <fi:faculty>fi</fi:faculty>
            <fi:advisor>Ing. Peter Žabička</fi:advisor>
        </author>
        <fi:thanks>Ďakujem vedúcemu mojej práce, Ing. Petrovi Žabičkovi za
            ochotu, usmerňovanie a pripomienky a rovnako celému týmu WebArchiv. 
        Tiež ďakujem mojej priateľke za podporu.</fi:thanks>
        <pubdate>2008</pubdate>
        <abstract>
            <para>Cieľom práce bolo navrhnúť a zrealizovať systém pre rozpoznávanie a archiváciu webových
                informačných zdrojov ako súčasť archivačného systému Heritrix. Systém by mal tieto zdroje čo
                najpresnejšie a najefektívnejšie automaticky identifikovať a archivovať pre využitie
                v projekte Webarchív Národnej knižnice ČR. Programové riešenie systému je implementované
                v jazyku Java. Program využíva funkcie mnohých projektov. Zvolenou platformou bol Linux
                s vývojovým prostredím NetBeans.
            </para>
        </abstract>
        <keywordset>
            <keyword>WebAnalyzer</keyword>
            <keyword>Heritrix</keyword>
            <keyword>WebArchiv</keyword>
            <keyword>Archivácia webu</keyword>
            <keyword>Rozpoznanie webu</keyword>
            <keyword>harvester</keyword>
        </keywordset>
    </bookinfo>
    <toc></toc>
    <chapter>
        <title>Úvod</title>
        <para>Internet patrí k najúspešnejším objavom ľudstva. 
            Mnohí z nás si v súčasnosti život bez neho nevieme ani predstaviť.
            Používame ho každodenne v práci, škole aj doma, pretože ponúka
            široký sortiment možností pre takmer všetky skupiny ľudí.
        </para>
        <para>
            V posledných rokoch nastal obrovský rozmach a Internet sa začal
            masovo zavádzať a používať v nespočetnom množstve inštitúcií, firiem
            a iných organizácií, či už verejnoprávnych alebo súkromných.
            Jeho veľký vplyv sa postupne premieta aj do škôl. Mení sa spôsob a forma
            výuky, ktorá sa s Internetom stáva viac interaktívna, kvalitnejšia a zábavnejšia.
            Hlavnou úlohou, či poslaním Internetu je zjednodušiť nám život pri
            riešení rôznych problémov, na ktoré Internet pozná tie správne ale aj
            nesprávne odpovede. Je to veľký pomocník, zdroj informácií, ktoré
            poskytuje s veľmi dobrou rýchlosťou a presnosťou.
            Drtivá väčšina ľudí súčasnej mladej generácie 
            pozná spôsob ako umiestniť nejaký dokument na Internet, tak aby bol
            online prístupný pre všetkých.
        </para>
        <para>
            Umiestňovanie rôznych materiálov na Internet sa stalo veľmi populárne.
            Tým pádom sú každodenne nové informácie verejne prístupné za relatívne 
            nízke nároky na čas a cenu. Existuje však aj riziko, že niektoré z
            informácií budú zmenené, čím môžu stratiť svoju informačnú hodnotu alebo 
            dokonca zmazané a navždy stratené. Existuje nespočetné množstvo 
            hodnoverného materiálu umiestneného na Internete. Mnohí z nás k takýmto
            internetovým stránkam a portálom pristupujeme, aby sme uvedené informácie
            použili v škole, práci, dome alebo v inej sfére života. Ak sa na Internet
            pozeráme z tohto hľadiska, tak ho môžeme označiť za studňu ľudskej 
            múdrosti, o ktorú sa musíme starať a nemôžeme dovoliť aby vyschla.
            todo zaclenit
            Musíme sa pokúsiť takéto informácie zachrániť, aby boli zachované kultúrne
            umelecké a historické hodnoty, ktoré tieto dokumenty nesú a aby boli
            prístupné aj pre budúce generácie. V posledných rokoch je zaznamenaný 
            obrovský nárast elektronických online zdrojov prístupných iba na Internete.
        </para>
        <para>
            Otázkou uchovávania obsahu Internetu sa zaoberali inštitúcie už pred mnohými rokmi.
            Medzi najznámejšie patrí neprofitujúca spoločnosť Internet Archive, ktorá 
            bola založená v roku 1996 za účelom vybudovania Internetovej knižnice a 
            poskytnutia permanentného prístupu pre výskumných pracovníkov, historikov, 
            školákov a všeobecnú verejnosť k historickým kolekciam, ktoré existujú v digitálnej podobe. V súčasnosti
            Internet Archive zahrňuje vo svojich kolekciách texty, audio, animované obrázky,
            softwér a webové stránky.
            Prostredníctvom Internet Archive môžete nájsť webové stránky, ktoré v súčasnosti 
            neexistujú alebo sa môžete pozrieť ako vyzerali vaše obľúbené stránky pred 
            desiatimi rokmi a sledovať ich vývoj až do súčasnosti. Internet Archive
            obsahuje snímky webových stránok už od roku 1996 až po dnes. Aj keď je 
            priemerná doba životnosti stránky 100 dní, Internet Archive archivuje
            stránky pravidelne každé dva mesiace. Pre posilnenie stability a trvanlivosti
            archívu je IA zrkadlovaný do Bibliotheca Alexandrina v Egypte, jediná knižnica
            na svete so zrkadlom. Podľa údajov z 20. februára IA v Bibliotheca Alexandrina
            zahŕňa webovú kolekciu od roku 1996 po rok 2006, 2000 hodín Egyptského a
            US vysielania a 1000 archívnych filmov. Toto všetko predstavuje 1.5 PB (petabytes)
            dát uložených na 880 počítačoch. Archív je plne funkčný a prístupný cez
            webové stránky projektu IA.
            Sprístupnenie archívu je uskutočňované pomocou programu Wayback Machine.
            Wayback Machine je služba, ktorá Vám umožňuje navštíviť archivované verzie
            webových stránok. Všetko čo potrebujete spraviť je napísať URL, ktorú
            požadujete a Wayback Machine Vám vráti zoznam všetkých
            archivovaných verzií zadanej stránky.                
            todo dopln info WM, neskor oddiel o wayback machine
        </para>
        <para>
            V Českej Republike existuje projekt nazvaný WebArchív, ktorý sa zaoberá 
            archiváciou a zprístupnením českého webu. 
            Jediné rozhodovacie kritérium pre identifikovanie českého webu funguje
            na základe domény, ktorú obsahuje každá URL. Tým je zaručené, že všetky
            URL s českou doménou budú archivované. Existujú však stránky, ktoré
            sa nachádzajú na iných doménach ako .cz a sú jednoznačne považované za 
            české. WebArchiv má silný záujem o tieto stránky a preto je jeden z
            novších cieľov WebArchivu archivácia českého webu mimo doménu .cz.
        </para>
        <para>
            Táto práca popisuje systém na rozpoznanie a archiváciu českého webu
            mimo národnú doménu. Systém na rozpoznanie českého webu je integrovaný
            do systému Heritrix, ktorý okrem iného tieto identifikované stránky 
            archivuje. Pomocou systému je možné identifikovať bohemikálny zdroj, 
            konkrétne webovú stránku, na základe viacerých kritérií, ktoré sú 
            v systéme zakomponované. Za bohemikálny zdroj systém považuje všetky
            stránky, ktoré spĺňajú určité podmienky. Tieto podmienky môže užívateľ
            upraviť pred spustením samotného systému, tak aby vyhovovali jeho 
            požiadavkam pre definíciu bohemikálneho zdroja. Podmienky sú
            vyhodnocované na základe kritérií implementovaných v systéme. Medzi
            základné patria identifikácia jazyka, identifikácia českých IP adries, 
            identifikácia e-mailov a telefónnych čísel. Každá zpracovaná stránka, 
            ktorá je systémom na rozpoznanie identifikovaná ako bohemikálna je 
            následne archivovaná systémom Heritrix.
        </para>
        <para>
            Následná kapitola bližšie popisuje spôsob archivácie v projekte 
            WebArchiv. Potom nasleduje kapitola popisujúca nadviazanie sklizne mimo
            .cz na sklizeň .cz. Ďalšie kapitoly, implementácie, popis, workflow,
            Heritrix doplním neskôr.
        </para>
    </chapter>
    
    <chapter>
        <title>Projekt WebArchiv</title>
        <para>
            Hlavnou úlohou projektu je archivácia a sprístupnenie českého webu.
            WebArchiv je v podstate digitálny archív "českých"
            webových zdrojov, ktoré sú tu zhromažďované za účelom ich dlhodobého uchovávania.
            Ochranu a uchovávanie týchto dokumentov zaisťuje od roku 2000 Národná knižnica 
            ČR v spoluprácií s Moravskou zemskou knižnicou a Ústavom výpočtovej techniky
            Masarykovej univerzity. Pri archivácií webu sa používajú softwérové nástroje
            vyvinuté organizáciou Internet Archive<citation>01</citation>.
        </para>
        
        <sect1>
            <title>Archivácie WebArchivu</title>
            <para>
                Ideálnym cieľom projektu by bolo archivovať všetky české zdroje, 
                ktoré kedy boli na Internete umiestnené. Z technických dôvodov to
                však nieje možné a preto WebArchiv používa osvedčené techniky, ktoré
                sa k tomuto ideálnemu cieľu približujú. V súčasnosti WebArchiv
                používa tri základné spôsoby archivácie.
            </para>
            <indexterm>
                <primary>Plošné sklizne</primary>
            </indexterm>
            <para><emphasis role="bold">Plošné sklizne</emphasis>
                Cieľom tohoto prístupu je archivácia čo najväčšieho počtu domácich 
                webových zdrojov na základe parametrov definovaných v aplikovanom SW,
                teda vyžadujúce minimum ďalšej intelektuálnej práce. Hlavným parametrom
                pre archiváciu českého webu je národná doména<citation>02</citation>.
            </para>
            <indexterm>
                <primary>Výberový prístup</primary>
            </indexterm>
            <para><emphasis role="bold">Výberový prístup</emphasis>
                Pravidlá výberu dokumentov registrovaných v národnej bibliografii
                zahrňujú:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>Územie</emphasis> - všetky dokumenty (zdroje)
                        publikované na území Českej republiky.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Jazyk</emphasis> - všetky zdroje v čestine (
                        bez ohľadu na miesto vydania)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Autorstvo</emphasis> - všetky zdroje českých
                        autorov (bez ohľadu na miesto vydania)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Predmet/obsah</emphasis> - všetky zdroje, 
                        ktorých obsah sa týka Českej republiky alebo českého národa (bez 
                        ohľadu na miesto vydania)<citation>02</citation>.
                    </para>
                </listitem>
            </itemizedlist>
            <indexterm>
                <primary>Tematické zbierky</primary>
            </indexterm>
            <para><emphasis role="bold">Tematické zbierky</emphasis>
                Tematické zbierky sú monotematické súbory webových dokumentov. V rámci
                tematických sklizní sledujeme predovšetkým také deje, ktoré doprevádzaja
                celospoločenská debata a je u nich teda predpoklad, že zaujmú 
                významejšie miesto z hľadiska dejín Českej republiky 
                (napr. voľby, povodne)<citation>02</citation>. 
            </para>
        </sect1>
        
        <sect1>
            <title>Plošná sklizeň národnej domény</title>
            <para>
                WebArchiv vykonáva plošnú sklizeň národnej domény pomocou
                softvérových nástrojov, webových pavúkov (crawler - angl.), 
                ktoré sú na túto činnosť stavané. Webové pavúky dokážu 
                automaticky prechádzať celý Web, stránku po stránke.
                Medzi najpopulárnejšie patrí systém Heritrix, Httrack a 
                Nedlib Harvester. 
            </para>
            <para>
                Webové pavúky začínajú parsovaním zvolenej webovej stránky,
                ktoré sú v tejto problematike známe pod názvom semienka. 
                Semienka sú zdrojové URI (unified resource identifier), z 
                ktorých celý proces začína. Pri parsovaní webový pavúk hľadá 
                hypertextové odkazy, ktoré sú na tejto stránke umiestené a 
                odkazujú na ďalšie stránky. Pavúk následne parsuje nájdené 
                stránky, aby našiel nové odkazy. Celý proces sa rekurzívne
                opakuje, pokiaľ už nebudú žiadne odkazy, ktoré by sa spracovali.
                Webový pavúk posiela HTTP požiadavky na dokumenty, umiestnené na
                serveroch. Postup je rovnaký ako keď užívateľ kliká na odkazy vo
                svojom webovom prehliadači. Webový pavúk však dokáže tento 
                proces automatizovať.
            </para>
            <sect2>
                <title>Úvod do Heritrixu</title>
                <para>
                    WebArchiv používa pri plošnej sklizni softvér Heritrix, 
                    ktorého hlavnou výhodou je modulárnosť a rozšíriteľnosť.
                    Heritrix sa dá jednoducho nastaviť tak, aby používal modul, 
                    ktorý pri spracovaní webových stránok akceptuje len tie, 
                    ktoré majú českú doménu. Všetky ostatné URI iných domén sú 
                    ignorované. 
                </para>
                <para>
                    Heritrix je pred spustením sklizne nakonfigurovaný. Na 
                    vstupe je množina semienok, ktoré predstavujú adresy 
                    rozsiahlych českých portálov. Ideou je zvoliť za semienka
                    také stránky, ktoré obsahujú čo najviac odkazov na iné 
                    české zdroje a stránky. Ideálny kandidát pre semienko
                    je napríklad portál <emphasis>seznam.cz</emphasis>, 
                    ktorý je výborným rozcestníkom do českého webu.
                </para>
                <para>
                    Proces nazvaný <emphasis>sklizeň_cz_2007</emphasis>, 
                    ktorého hlavnou úlohou bola celoplošná sklizeň domácich 
                    webových zdrojov, trval 3 týždne na serverovom počítači. 
                    Výsledkom sklizne vykonanej na systéme Heritrix je kolekcia
                    archívnych súborov, ktoré sú umiestnené v adresárovej 
                    štruktúre na disku. Celá kolekcia za rok 2007
                    obsahuje 81 300 000 dokumentov o celkovej veľkosti 3.6 TB.                    
                </para>
                <sect3>
                    <title>Archívny súbor - ARC</title>
                    <para>
                        ARC je súbor vytvorený pre archívne účely a je hlavným
                        stavebným kameňom arhívu. Obvyklá veľkosť ARCu je 100 MB.
                        Skladá sa z hlavičky, ktorá jednoznačne identifikuje
                        každý ARC a jednotolivých URL záznamov, ktoré obsahujú
                        samotné dáta.
                        todo obrázok ARCU
                        Formát názvu ARCu je :
                        <variablelist>
                            <varlistentry>
                                <term>
                                    <filename>
                                    </filename>
                                </term>
                                <listitem>
                                    <para>[prefix]-[12-digit-timestamp]-[series#-padded-to-5-digits]-[crawler-hostname].arc.gz</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>    
                        Prefix v názve ARC súboru si zvolí užívateľ pri 
                        konfigurácií Heritrixu. Heritrix po spustení sklizne 
                        následne generuje veľké množstvo ARC súborov, ktoré 
                        sú ďalej spracované inými systémami WebArchivu. Viz
                        Lukášova DP ARCWayback.
                    </para>
                </sect3>
            </sect2>
        </sect1>
        
        <sect1>
            <title>Zprístupnenie archívu</title>
            <para>
                popis indexácie, zprístupnenia
                ARC súbory, ktoré sme získali z Heritrixu sa musia zaindexovať, 
                tak aby bolo možné v nich rýchlo vyhľadávať jednotlivé záznamy.
                Problém indexovania a vyhľadávania záznamov v ARC súboroch 
                rieši systém ARCWayback, ktorý si WebArchív vyvinul presne na 
                svoje potreby. Sprístupnenie týchto záznamov poskytuje ďalší
                systém Wayback Machine.
            </para>
            <sect2>
                <title>Wayback Machine</title>
                <para>
                    Systém vyvinutý spoločnosťou Internet Archive, ktorý 
                    užívateľom umožňuje prehliadať archivované verzie webových
                    stránok z rôznych časov. Predstavuje front end celého
                    archívu. Wayback Machine poskytuje prístup k archivovaným
                    dátam prostredníctvom URL (unified resource locator). Jeho 
                    nevýhoda je, že nepodporuje fulltextové prehľadávanie, takže
                    užívateľ musím poznať URL adresu webovej stránky aby mohol 
                    pristúpiť k archívu. Po zadaní URL adresy, Wayback Machine
                    vráti zoznam dátumov, kedy bola stránka archivovaná. Potom 
                    stačí kliknúť na jeden zo záznamov a prezerať archivovanú
                    stránku. Odkazy, ktoré sa na tejto stránke nachádzajú 
                    odkazujú na iné stránky z archívu. Pri klikaní na odkazy sa
                    Waybacka Machine vždy snaží vrátiť stránky, ktoré sú 
                    archivované v čo najbližšom čase ako pôvodná stránka.
                    To znamená že môžete 
                    surfovať po webe, tak ako vyzeral v danom čase v minulosti.
                </para>
            </sect2>
        </sect1>
        
        <sect1>
            <title>Nástup sklizne mimo národnú doménu</title>
            <para>
                Sklizeň mimo .cz by mala naviazať na celoplošnú sklizeň 
                českých webových zdrojov. Pri sklizni národnej domény sa archivujú
                všetky české stránky, ktoré prejdú procesom Heritrixu. Všetky
                odkazy, ktoré sa na spracovávaných stránkach nájdu sa filtrujú
                na základe domény. Odkazy s českou doménou sú ďalej zahrnuté do
                kolekcie URL adries čakajúcich na spracovanie, zatiaľ čo ostané
                odkazy vedúce do iných domén sú odhodené.
            </para>
            <para>
                Tieto odhodené odkazy mimo doménu .cz však môžu byť hodnotným 
                materiálom pri nástupe sklizne mimo .cz. Existuje možnosť, že
                odkazy mimo doménu .cz, ktoré sa nachádzajú na českej stránke 
                môžu odkazovať na iné relevanté, bohemikálne stránky, ktorých 
                doména už nieje česká. Preto je výhodné skúmať tieto odhodené
                odkazy zo stránok s českou doménou ako prvé. Heritrix sa dá
                nakonfigurovať, aby tieto odhodené odkazy z českých stránok 
                logoval do osobitného súboru. Tento súbor po skončení sklizne 
                .cz bude plný hodnotných odkazov, ktoré môžeme predať Heritrixu
                na vstupe vo forme semienok pri následnej sklizni mimo .cz.
            </para>
            <para>
                Po skončení <emphasis>sklizne_cz_2007</emphasis> Heritrix
                vygeneroval súbol <emphasis>outScope.log</emphasis>, ktorého
                veľkosť je 16 GB. Na každom riadku sa nachádzajú logovacie 
                informácie a potom URL, ktorá sa použije ako semienko pre 
                sklizeň mimo .cz. Z technických problémov nieje možné predhodiť
                Heritrixu 16 GB dlhý zoznam semienok a preto je nutné tento 
                zoznam rozdeliť na viac kolekcií, ktoré sa postupne spracujú.
                todo 
                popis požiadavkov, postupu naviazania, adam loguje rejetcted uri
                postup spracovania dlheho logu, asi po castiach, ale musi byt 
                zachovana konzistencia, nejake sety seedov
            </para>
        </sect1>
    </chapter>
    
    <chapter>
        <title>Heritrix</title>
        <para>
            Herirtix je webový pavúk a zároveň archivačný nástroj v jednom.
            Je to open-source nástroj napísaný v Jave, vyvíjaný spoločnosťou 
            Internet Archive. Poskytuje užívateľsky príjemne webové rozhranie a
            okrem toho umožňuje spustiť a inicializovať sklizeň cez príkazový 
            riadok, čím ušetrí čas pri spúšťaní opakovaných úloch. Užívateľský
            manuál sa nachádza na stránkach Heritrixu http://crawler.archive.org.
            strucny uvod, prednosti heritrixu oproti ostatnym crawlerom
        </para>
        <para>
            Pred spustením sklizne je treba v heritrixe vytvoriť takzvaný "job",
            v ktorom sa ďalej vyberajú a konfigurujú moduly, ktoré chcete pri
            sklizni použiť. Prostredníctvom webového rozhrania je konfigurácia
            intuitívna a jednoduchá. Pri vytváraní "job" je nutné zadať jeho 
            názov, stručný popis a hlavne zoznam semienok, ktoré sa majú použiť
            ako iniciálne URI pri štarte sklizne.
        </para>
        <para>
            Východiskové moduly sú ihneď nastavené, ale ak chcete robiť 
            konkrétnu sklizeň, tak si môžete zvoliť tie moduly, ktoré 
            aktuálne potrebujete. Pri každom module je jeho stručný popis, aby
            bolo jasné na akú úlohu daný modul slúži.
        </para>
        <para>
            Po konfigurácií modulov ostáva posledný krok. Vytvorený "job" sa 
            zaradí do čakajúcich "jobs" a stačí ho už len spustiť. Webové 
            rozhranie ukazuje aktuálne informácie o spustenom "job", medzi ktoré
            patrí počet aktuálne pracujúcich vláken, spotrebovaná pamäť, počet a 
            veľkosť dokumentov, ktoré sa zpracovali a mnoho ďalších, ktoré sú
            dostupné priamo v rozhraní.
        </para>
        
        <sect1>
            <title>Prehľad Heritrixu</title>
            <para>
                Heritrix je navrhnutý modulárne. Ktoré moduly sa majú použiť 
                môže byť nastavené za behu z užívateľského rozhrania. Ak chcete
                aby sa webový pavúk správal inak ako je defaultne nastavený, 
                môžete naprogramovať vlastný modul, ktorý pridáte do Heritrixu k
                ostatným alebo ním nahradíte nietkorý zo stávajúcich modulov.
            </para>
            <para>
                Pred programovaním vlastného modulu je nevyhnutné vedieť akým
                spôsobom Heritrix pracuje a keďže program je vytvorený v Jave, 
                je nutné vedieť orientovať sa v tomto programovacom jazyku.
            </para>
            <para>
                Heritrix pozostáva z jadra a prídavných modulov. Triedy jadra 
                sa dajú konfigurovať, ale nemôžu byť odstránené, zatiaľ čo triedy 
                prídavných modulov môžu byť nahradené. Množina základných 
                prídavných modulov je defaultne pridaná k Heritrxu, ale ak 
                potrebujete iný modul, môžete si ho naprogramovať 
                <citation>03</citation>.
            </para>
            <figure>
                <title>Prehľad Heritrixu</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="crawler_overview1.png" />
                    </imageobject>
                </mediaobject>
            </figure>            
        </sect1>
        <sect1>
            <title>Objekt CrawlController</title>
            <para>
                CrawlController obsahuje všetky triedy, ktoré spolupracujú pri 
                vykonávaní plazenia po stránkach. Poskytuje rozhranie pre 
                činnosť plazenia a spúšťa "hlavné vlákno" (angl."master thread"),
                ktoré prideľuje URI adresy z objektu Frontier jednotlivým 
                vláknam ToeThread. CrawlController predstavuje globálny kontext
                celého procesu plazenia a všetky subkomponenty k sebe zvyčajne 
                pristupujú a komunikujú cez CrawlController 
                <citation>03</citation>.
            </para>
        </sect1>
        <sect1>
            <title>Objekt Frontier</title>
            <para>
                Objetk Frontier je zodpovedný za rozdávanie následovnej URI, ktorá
                má byť zpracovaná. Má zapezpečovať zdvorilosť, ktorá zaisťuje, že
                žiadny webový server bude príliš zaťažovaný prechádzaním stránok, 
                ktoré sú na ňom umiestnené. Po tom ako je URI zpracovaná je 
                predaná opäť objektu Frontier spolu so všetkými objavenými 
                odkazmi URI, ktoré by mal Frontier naplánovať na ďalšie 
                spracovanie<citation>03</citation>.
            </para>
            <para>
                It is the Frontier which keeps the state of the crawl. 
                This includes, but is not limited to:
                Frontier je ten objekt, ktorý udržuje stav procesu prechádzania
                stránok. Stav zahŕňa hlavne tieto položky:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>URI adresy, ktoré boli obajvené</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>URI adresy, ktoré sa aktuálne spracúvajú</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>URI adresy, ktoré boli spracované</emphasis>
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Trieda Frontier implementuje rozhranie Frontier a môže byť nahradená
                hocijakou inou triedou Frontier, ktorá bude toto rozhranie implementovať.
                Je nutné spomenúť, že naprogramovanie triedy Frontier nie je triviálna
                záležitosť<citation>03</citation>.
            </para>
            <para>
                Objekt Frontier sa spolieha na správanie prinajmenej nasledújucich 
                externých procesorov: PreconditionEnforcer, LinksScoper a
                FrontierScheduler (nižšie bude o procesoroch popísané viac).
                Procesor PreconditionEnforcer zabezpečuje, že dns(vysvetlivka) a robots
                (vysvetlivka) sú skontrolované pred tým než sa vykoná "download" stránky.
                LinksScoper testuje či je daná URI v oblasti záujmu a ak áno, tak aký
                výsoký je záujem o danú URI. Podľa toho LinksScoper nastaví prioritu
                pre danú URI, na základe ktorej sa vykonáva zoradenie URI adries 
                čakajúcich na spracovanie v objekte Frontier. Toto zoradenie už vykonáva 
                pomocou objektu FrontierScheduler<citation>03</citation>.
                
            </para>
        </sect1>
        <sect1>
            <title>Objekt ToeThread</title>
            <para>
                Webový pavúk Heritrix je multivláknová aplikácia. Každá URI je 
                spracovávaná svojím vlastným vláknom nazvaným ToeThread. Objekt 
                ToeThread žiada objekt Frontier o novú URI a následne ju posiela cez
                všetky procesory. Po spracovaní URI posledným procesorom si ToeThread
                pýta ďalšiu URI<citation>03</citation>.
            </para>
        </sect1>
        <sect1>
            <title>Objekt Processor</title>
            <para>
                Procesory sú zoskupené do procesorových reťazcov. Každá reťaz vykonáva s
                URI nejaký proces. Keď objekt Processor skončí s URI ToeThread pošle URI
                do nasledujúceho procesoru, pokiaľ URI nie je spracovaná všetkými 
                procesormi. Procesor má možnosť povedať URI, aby preskočila do konkrétnej
                reťaze daších procesorov. Rovnako ak Processor vyhodí fatálnu chybu, tak
                URI automaticky skočí do poslednej reťaze nazvanej Post-processing chain.
                Postup spracovania URI jednotlivými procesorovými reťazcami:
                <figure>
                    <title>Reťazec procesorov</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="processing_steps.png" />
                        </imageobject>
                    </mediaobject>
                </figure>    
                The task performed by the different processing chains are as follows:
                Postup spracovania URI jednotlivými procesorovými reťazcami:
            </para>
            <sect2>
                <title>Pre-fetch processing chain</title>
                <para>
                    Prvá reťaz procesorov je zodpovedná za vyšetrovanie, či URI môže byť
                    spracovaná. Je tu zahrnutá kontrola, či sú všetky predpoklady 
                    splnené (DNS-vyhľadávanie, kontrola súboru robots.txt, autentifikácia).
                    Je tiež možné úplne zablokovať spracovanie URI adries, ktoré neprešli
                    kontrolou<citation>03</citation>.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            Webové pavúky a iné roboty sú programy, ktoré dokážu automaticky
                            prechádzať webové stránky. Vyhľadávače ako Google ich používajú na 
                            indexovanie celého obsahu internetu, spammery ich používajú na 
                            vyhľadávanie e-mailov a okrem toho majú mnoho ďalších využití.
                        </para>
                        <para>
                            Vlastníci webových stránok používajú textový súbor nazvaný robots.txt, aby prostredníctvom
                            neho predali inštrukcie o ich stránkach webovým robotom (The Robots Exclusion Protocol).
                            Vždy keď chce webový robot navštíviť URL webovej stránky, najprv hľadá tento súbor
                            robots.txt. Napríklad pri návšteve URL http://www.seznam.cz sa robot pokúša získať
                            súbor z URL http://www.seznam.cz/robots.txt. V tomto súbore
                            môže byť zapísané, že by robot nemal navštevovať žiadne stránky z 
                            danej domény. Existuje však mnoho robotov, ktoré tento súbor
                            a jeho inštrukcie ignorujú <citation>04</citation>.
                            todo moznost doplnit
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    V reťazi Pre-fetch processing chain by mali byť zahrnuté tieto
                    procesory (alebo náhradné moduly, ktoré vykonávajú podobné operácie):
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>procesor Preselector</emphasis> - 
                            Posledná kontrola, či by URI mala byť skutočne spracovaná.
                            Môže napríklad znovu skontrolovať, či URI patrí do oblasti
                            záujmu. Je to užitočné ak sa zmenia pravidlá oblasti záujmu
                            v priebehu procesu samotného plazenia po webových stránkach.
                            Kontrola či URI patrí do oblasti záujmu je zvyčajne 
                            vykonávaná objektom LinksScoper, predtým než sú nové URI
                            pridané do objektu Frotnier, aby boli spracované. Ak užívateľ
                            zmení limity oblasti záujmu, niesú tým zasiahnuté URI
                            zaradené do objektu Frontier. Skontrolovaním oblasti 
                            záujmu znovu v tomto bode, sa môžte ubezpečiť, že iba URI
                            adresy, ktoré patria do oblasti záujmu budú spracované
                            <citation>03</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>procesor PreconditionEnforcer</emphasis> -
                            Zabezpečuje, že všetky predpoklady pre spracovanie URI
                            sú splnené. Konkrétne zahrňuje overenie, že DNS a 
                            robots.txt boli získané pre danú URI adresu
                            <citation>03</citation>.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2>
                <title>Fetch processing chain</title>
                <para>
                    Procesory v tejto reťazi sú zodpovedné pre získanie dát zo 
                    vzdialeného serveru. Mal by tu byť jeden procesor pre každý 
                    protokol, ktorý Heritrix podporuje, ako napríklad FetchHTTP
                    <citation>03</citation>.
                </para>
            </sect2>
            <sect2>
                <title>Extractor processing chain</title>
                <para>
                    V tomto bode je obsah dokumentu odkazovaného prostredníctvom
                    URI prístupný a niekoľko procesorov sa bude snažiť získať
                    z tohoto obsahu nové odkazy<citation>03</citation>.
                </para>
            </sect2>
            <sect2>
                <title>Write/index processing chain</title>
                <para>
                    Táto reťaz je zodpovedná za zapisovanie dát do archívnych 
                    súborov. Heritrix obsahuje procesor ARCWriterProcessor, ktorý
                    zapisuje dáta do formátu ARC. Nové procesory by mohli vyť 
                    naprogramované, aby podpodorvali aj iné formáty<citation>03</citation>.
                </para>
            </sect2>
            <sect2>
                <title>Post-processing chain</title>
                <para>
                    URI adresa vždy prechádza cez túto reťaz procesorov aj keď
                    bolo predtým rozhodnuté iným procesorom, že táto URI sa nebude
                    spracovávať. Reťaz Post-processing chain musí obsahovať
                    nasledujúce procesory (alebo obdobné moduly vykonávajúce 
                    podobné operácie)<citation>03</citation>.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>procesor CrawlStateUpdater</emphasis> - 
                            Aktualizuje informácie o každom hoste, ktoré sa možu uplatniť
                            pri ďalšom spojení na server. Konkrétne robots.txt a informácie
                            o IP adresách<citation>03</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>procesor LinksScoper</emphasis> -
                            Kontroluje všetky odkazy extraktované z aktuálneho získaného
                            obsahu s oblasťou záujmu. Všetky odkazy, ktoré nepatria 
                            do oblasti záujmu (napr. oblasť záujmu môže byť doména .cz), 
                            ktorú sme si zvolili sú vyradené. Môžeme povoliť logovanie
                            všetkých vyradených odkazov<citation>03</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>procesor FrontierScheduler</emphasis> -
                            Rozplánuje všetky URI adresy nájdene v aktuálne spracovávanej
                            URI do objektu Frontier, tak aby sa postupne spracovali podľa
                            stupňa dôležitosti<citation>03</citation>.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>
        </sect1>
        <sect1>
            <title>Triedy URI v Heritrixe</title>
            <para>
                URI adresy sú v Heritrixe reprezentované niekoľkými triedami. Základný
                stavebný blok predstavuje org.archive.datamodel.UURI, ktorý dedí
                triedu org.apache.commons.httpclient.URI. "UURI" je výraz pre "Usable URI"
                použiteľná URI. Ak je UURI adresa úspešne vytvorená, tak to znamená
                že pôvodná URI adresa spĺňa všetky podmienky a nejedná sa o žiadnu
                podvrhnutú URI adresu, ktorá by mohla neskôr v procese spracovania
                vytvárať konflikty. UURI taktiež poskytuje mnohé metody na prístup k
                rôznym častiam URI adresy<citation>05</citation>.
            </para>
            <para>
                Dve triedy, ktoré obaľujú triedu UURI v Heritrixe sú:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>CandidateURI</emphasis> -
                        Je to URI, ktorá je objavená počas behu procesu a môže 
                        byť zahrnutá do kolekcie URI čakajúcich na spracovanie, 
                        čím sa zmení z objektu CandidateURI na objekt CrawlURI.
                        Obsahuje hlavne atributy potrebné na analýzu, či
                        CandidateURI patrí do oblasti záujmu. Táto trieda obaľuje
                        instanciu UURI<citation>05</citation>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>CrawlURI</emphasis> -
                        Reprezentuje kandidátnu URI a uchováva stav, ktorý sa
                        mení počas procesu spracovania procesormi. CrawlURI je 
                        potomok triedy CandidateURI. Samotná instancia je 
                        vytvorená v momente, keď sa vyberie z objektu Frontier 
                        a predá sa procesorom na spracovanie<citation>05</citation>.
                    </para>
                </listitem>
            </itemizedlist>
            <sect2>
                <title>Zoznam atributov objektu CrawlURI</title>
                <para>
                    Objekt CrawlURI poskytuje zoznam atributov, ktorý je použitý
                    na uchovanie ľubovoľných informácií o URI počas procesu jej 
                    spracovnia. Pri písaní nových procesorov, určite využijete
                    tento zoznam atributov. Zoznam atributov je zoznam párov kľúč a
                    hodnota, ktoré sú prístupné prostredníctvom klasických get/set 
                    metod. Kľúčové hodnoty sú pozbierané z rozhrania 
                    CoreAttributeConstants, ktoré implementujú všetky procesory.
                    Ak chcete použiť iné kľúče ako tie, ktoré sú obsiahnuté v tomto
                    rozhraní budete musieť pridať spravovanie týchto atributov do
                    nejakého vlastného modulu<citation>05</citation>.
                </para>
            </sect2>
            <sect2>
                <title>Nahrávacie toky - The recorder streams</title>
                <para>
                    Heritrix by nebol moc užitočný, keby neposkytoval prístup k 
                    HTTP požiadavku a odpovedi. Pre tento účel objekt CrawlURI má
                    metodu nazvanú getHTTPRecorder(). Rekordér je referencovaný
                    v objekte CrawlURI a tým prístupný pre všetky procesory, ktoré
                    s CrawlURI pracujú. Postup ako využit rekordér je popísaný 
                    v ďalšej kapitole "Ako napísať Processor"<citation>05</citation>.
                </para>
            </sect2>            
        </sect1>
        <sect1>
            <title>ComplexType hierarchy</title>
            <para>
                Všetky konfigurovateľné moduly v Heritrixe dedia triedu ComplexType
                alebo jeden z jeho potomkov. Trieda ComplexType je zodpovedná
                za uchovávanie definíci konfigurovateľných atribútov daného modulu.
                Aktuálne hodnoty sú uložené v instancii objektu DataConteiner.
                Objekt DataContainer nie je nikdy prístupný z užívateľského kódu.
                Namiesto toho užívateľ pristupuje k týmto atributom cez metódy
                v objekte ComplexType. Tieto atribúty sú prístupné rôznymi spôsobmi, 
                podľa toho či k ním pristupujeme z užívateľského rozhrania alebo
                z vnútra bežiaceho procesu<citation>06</citation>.
            </para>
            <para>
                Keď je atribút pristupovaný z URI (čítanie alebo zapisovanie), musíte
                sa uistiť, že editujete atribút v správnom kontexte. Na dosiahnutie
                tohoto existujú metódy getLocalAttribute(CrawlerSettings settings, String name) a
                setAttribute(CrawlerSettings settings, Attribute attribute), ktoré
                berú nastavovací objekt "settings" ako parameter. Tieto metódy 
                pracujú iba na dodanom objekte settings.  Navyše metódy
                getAttribute(name) a setAttribute(Attribute attribute) sú tu tiež, 
                aby sa zachovala špecifikácia Java JMX. Posledné dve metódy
                pracujú vždy s globálnym objektom settings<citation>06</citation>.
            </para>
            <para>
                Získanie atribútu uprostred procesu plazenie po webových stránkach
                je rôzne v tom, že vždy chcete získať hodnotu aj keď nieje v jeho 
                kontexte. V moduloch je vždy prístupný objekt CrawlURI, ktorý
                môže slúžiť na zaistenie toho správneho kontextu. Metóda
                getAttribute(String name, CrawlURI uri) by mala byť použitá, aby 
                sa zaistilo že je vybraný správny kontext<citation>06</citation>.
            </para>
            <para>
                Každý z atribútov má definovaný typ. Povolené typy sú podtriedy
                triedy Type. Tri základné typy:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>SimpleType - jednoduchý typ</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>ListType - typ zoznam</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>ComplexType -  komplexný typ</emphasis>
                    </para>
                </listitem>
            </itemizedlist>
            <sect2>
                <title>SimpleType -  Jednoduchý typ</title>
                <para>
                    SimpleType je hlavne pre reprezentovanie Java wraperov pre 
                    primitívne Java typy. Navyše tiež obaľuje typ java.util.Date a
                    špeciálny typ Heritrixu nazvaný TextField<citation>06</citation>.
                </para>
            </sect2>
            <sect2>
                <title>ListType - typ zoznam</title>
                <para>
                    ListType je ďalej dedený vo viacerých verziach pre obalené
                    primitívne Java typy (DoubleList, FloatList, IntegerList, LongList, 
                    StringList). Zoznam uchováva hodnoty v rovnakom poradí, v akom
                    boli pridané. Ak atribút typu ListType je preťažený, tak jeho
                    kompletný zoznam hodnôt je nahradený preťažujúcim levelom
                    <citation>06</citation>.
                </para>
            </sect2>
            <sect2>
                <title>ComplexType - komplexný typ</title>
                <para>
                    Komplexný typ je mapa párov meno/hodnota. Hodnoty môžu byť
                    hocijakého typu vrátane nových komplexných typov. Trieda 
                    ComplexType je definovaná abstraktná trieda a môžte použiť
                    jednu z podtried MapType alebo ModuleType. Typ MapType povoľuje
                    pridávanie nových párov meno/hodnota počas behu programu, 
                    zatiaľ čo ModuleType podporuje iba pridávanie párov meno/hodnota
                    v čase vytvárania modulu<citation>06</citation>.
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>Common needs for all configurable modules</title>
            <para>
                Ako už bolo spomenuté, všetky konfigurovateľné moduly v Heritrxe
                dedia triedy ComplexType (alebo jeden z jeho potomkov). Ak chcete
                napísať vlastný modul, mali by ste dediť z triedy ModuleType, ktorá
                je potomkom triedy ComplexType. Trieda ModuleType bola zamýšľaná
                na to, aby bola rodičom každého modulu v Heririxe<citation>07</citation>.
            </para>
            <sect2>
                <title>Definícia modulu</title>
                <para>
                    Heritrix vie ako pracovať s komplexným typom a ako získať potrebné
                    informácie zadané prostredníctvom užívateľského rozhrania.
                    Aby to Heritrix vedel spracovať, nový modul musí splňovať 
                    pár pravidel<citation>07</citation>:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            Modul by mal vždy implementovať konštruktor, očakávajúci
                            práve jeden argument - argument name (meno).
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Všetky atribúty, ktoré chcete aby boli konfigurovateľné, 
                            by mali byť definované v konštruktore daného modulu.
                        </para>
                    </listitem>
                </itemizedlist>
                <sect3>
                    <title>Povinný jedno argumentový konštruktor</title>
                    <para>
                        Všetky moduly potrebujú mať konštruktor prijímajúci práve jeden 
                        argument typu java.lang.String. Reťazec je použitý na 
                        identifikovanie modulu. V prípade, že nový modul je 
                        rovnakého typu ako existujúci modul, ktorý sa môže vyskytovať 
                        v Heritrixe práve jeden krát, musí sa meno nového modulu 
                        zhodovať s menom existujúceho modulu. To je presne prípad
                        modulu Frontier, ktorý je v procese plazenia po webových 
                        stránkach použitý práve raz. Rozhranie Frontier, ktoré
                        musie implementovať všetky triey Frontier má statickú
                        premennú<citation>07</citation>:
                    </para>
                    <programlisting><![CDATA[
                    public static final String ATTR_NAME = "frontier";
                    ]]></programlisting>
                    <para>
                        which implementations of the Frontier use instead of the string 
                        argument submitted to the constructor. Here is the part of the 
                        default Frontiers' constructor that shows how this should be done.
                        ktorú implemetácie Frontier používajú namiesto reťazcového
                        argumentu predloženého konštruktoru. Časť kódu konštruktoru
                        triedy Frontier<citation>07</citation>:
                    </para>
                    <programlisting><![CDATA[
public Frontier(String name) {
    //The 'name' of all frontiers should be the same (Frontier.ATTR_NAME)
    //therefore we'll ignore the supplied parameter. 
    super(Frontier.ATTR_NAME, "HostQueuesFrontier. Maintains the internal" +
        " state of the crawl. It dictates the order in which URIs" +
        " will be scheduled. \nThis frontier is mostly a breadth-first" +
        " frontier, which refrains from emitting more than one" +
        " CrawlURI of the same \'key\' (host) at once, and respects" +
        " minimum-delay and delay-factor specifications for" +
        " politeness.");
                    ]]></programlisting>
                    <para>
                        Ako je ukázané v tomto príklade, konštruktor musí volať
                        nadradené konštruktor. Tento príklad tiež ukazuje ako nastaviť
                        popis modulu. Popis modulu je použiťý uživateľským rozhraním
                        na spravádzanie užívateľa v konfigurovaní procesu plazenia 
                        webovách stránok<citation>07</citation>.
                    </para>
                </sect3>
                <sect3>
                    <title>Definovanie atribútov</title>
                    <para>
                        Atribúty v module, ktoré chcete aby boli konfigurovateľné
                        musia byť definované v konštruktore modulu. Pre tento účel 
                        objekt ComplexType má metodu addElementToDefinition(Type type).
                        Argument predaný tejto metóde je definícia atribútu. Trieda
                        Type je nadtriedou všetkých definícií atribútov povolených pre
                        triedy ModuleType. Trieda Type implementuje všetky konfiguračné
                        metódy spoločné pre všetky typy, ktoré definujú atribút v 
                        module. Metoda addElementToDefinition vracia Type, tak aby
                        bolo jednoduché upresňovať konfiguráciu typu. Pozrime sa na
                        implementáciu definície atribútov (príklad z modulu Ftonier)
                        <citation>07</citation>:
                    </para>
                    <programlisting><![CDATA[
public final static String ATTR_MAX_OVERALL_BANDWIDTH_USAGE =
        "total-bandwidth-usage-KB-sec";
private final static Integer DEFAULT_MAX_OVERALL_BANDWIDTH_USAGE =
        new Integer(0);
...

Type t;
t = addElementToDefinition(
    new SimpleType(ATTR_MAX_OVERALL_BANDWIDTH_USAGE,
    "The maximum average bandwidth the crawler is allowed to use. " +
    "The actual readspeed is not affected by this setting, it only " +
    "holds back new URIs from being processed when the bandwidth " +
    "usage has been to high.\n0 means no bandwidth limitation.",
    DEFAULT_MAX_OVERALL_BANDWIDTH_USAGE));
t.setOverrideable(false);
                    ]]></programlisting>  
                    <para>
                        Tu pridávame definíciu atribútu typu SimpleType (čo je 
                        podtrieda triedy Type). Konštruktor triedy SimpleType 
                        berie tri argumenty: meno, popis a defaultnú hodnotu.
                        Zvyčajne sú meno a defaultná hodnota definované ako konštanty, 
                        ale nieje to povinné<citation>07</citation>.
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <title>Pristupovanie k atribútom</title>
                <para>
                    Vo väčšine prípadov, keď modul potrebuje pristupovať k jeho
                    vlastným atributom, objekt CrawlURI je prístupný. Správna cesta
                    ako sa uistiť, že všetky povýšenia a rafinovanosti sú uvážené, 
                    je použiť metódu getAttribute(String name, CrawlURI), pri 
                    získavaní atribútov. Niekedy môže byť kontext definovaný inými
                    objektmi než CrawlURI, potom je nutné použiť metódu
                    getAttribute(Object context, String name) na získanie hodnoty.
                    Táto metoda sa snaží zistiť, či kontext je objekt nejakého typu
                    URI alebo typu settings. Ak nemôže nájsť nič užitočné, tak je
                    použitý globálne nastavenie je použité ako kontext. Ak však 
                    aj tak nemáte žiadny kontext, čo môže byť prípad v nejakom 
                    inicializačnom kóde, je možné použiť metódu 
                    getAttribute(String name)<citation>07</citation>.
                </para>
            </sect2>
            <sect2>
                <title>Zostavenie jednoduchého modulu</title>
                <para>
                    Zo získaných znalostí už môžme zostaviť prvý jednoduchý modul, 
                    ktorý síce nerobí nič užitočné, ale ukazuje niektoré zo 
                    zmienených spôsobov<citation>07</citation>.
                </para>
                <programlisting><![CDATA[
package myModule;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.AttributeNotFoundException;
import org.archive.crawler.settings.MapType;
import org.archive.crawler.settings.ModuleType;
import org.archive.crawler.settings.RegularExpressionConstraint;
import org.archive.crawler.settings.SimpleType;
import org.archive.crawler.settings.Type;

public class Foo extends ModuleType {
  private static Logger logger = Logger.getLogger("myModule.Foo");      // 1.pozn.

  public Foo(String name) {
    Type mySimpleType1 = new SimpleType(
                "name1", "Description1", new Integer(10));              // 2.pozn.
    addElementToDefinition(mySimpleType1);

    Type mySimpleType2 = new SimpleType(
                "name2", "Description2", "defaultValue");
    addElementToDefinition(mySimpleType2);
    mySimpleType2.addConstraint(new RegularExpressionConstraint(        // 3.pozn.
                ".*Val.*", Level.WARNING,
                "This field must contain 'Val' as part of the string."));

    Type myMapType = new MapType("name3", "Description3", String.class);     // 4.pozn.
    addElementToDefinition(myMapType);
  }

  public void getMyTypeValue(CrawlURI curi) {
    try {
      int maxBandwidthKB = ((Integer) getAttribute("name1", curi)).intValue();      // 5.pozn.
    } catch (AttributeNotFoundException e) {
      logger.warning(e.getMessage());
    }
  }

  public void playWithMap(CrawlURI curi) {
    try {
      MapType myMapType = (MapType) getAttribute("name3", curi);
      myMapType.addElement(
              null, new SimpleType("name", "Description", "defaultValue"));         // 6.pozn.
      myMapType.setAttribute(new Attribute("name", "newValue"));                    // 7.pozn.    
    } catch (Exception e) {
      logger.warning(e.getMessage());
    }
  }
}
                ]]></programlisting>
                <para>
                    Tento príklad ukazuje niekoľko vecí:
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis>1.poznámka</emphasis> - 
                            Jedna vec, ktorú sme zatiaľ nezmienili je všeobecné 
                            logovanie chýb v Heritrixe. Heritrix používa štandardné
                            logovanie Java 1.4 logging. Zvykom je inicializovať
                            logovanie s menom aktuálnej triedy<citation>07</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>2.poznámka</emphasis> - 
                            Na tomto mieste difinujeme a pridávame SimpleType, ktorý
                            berie Integer ako argument a nastavuje ho na východziu
                            hodnotu 10<citation>07</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>3.poznámka</emphasis> -
                            Je tiež možné pridávať obmedzenia na jednotlivé hodnoty.
                            Všetky hodnoty z polí zobrazených na užívatľskom rozhraní
                            sú typu java.lang.String. Tento field kladie požiadavku
                            aby reťazec obsahoval 'Val' ako časť reťazca. Obmedzenia
                            majú tiež určitý level a popis. Popis je použitý v 
                            užívateľskom rozhraní, aby dal užívateľovi jasné vysvetlenie, 
                            ak predaná hodnota nespĺňa obmedzenia. Používajú sa 
                            tri úrovne<citation>07</citation>.
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>Level.INFO</emphasis> -
                                    Hondoty sú prijaté ak keď nespĺňajú požadované 
                                    obmedzenia. Toto sa používa, keď nechcete zakázať
                                    hodnotu, ale chcete varovať užívateľa, že zadaná 
                                    hodnota vyzerá byť mimo rozumnú hranicu<citation>07</citation>.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>Level.WARNING</emphasis> -
                                    Hodnota musí byť spĺňať obmedzenia platnej hodnoty
                                    pre "crawl job", ale je legálna v progiloch aj keď
                                    tieto obmedzenia nespĺňa. Toto je užitočné, pri 
                                    zadávaní hodnôt do profilu, ktorý si môže užívateľ
                                    meniť pre každý "crawl job" odvodený z profilu<citation>07</citation>.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>Level.SEVERE</emphasis> -
                                    Hodnota akéhokoľvek druhu nie je povolená, ak 
                                    nespĺňa požiadavky obmedzenia<citation>07</citation>.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para><emphasis>4.poznámka</emphasis>
                            Tento riadok definuje MapType povoľujúci iba reťazce String ako hodnoty<citation>07</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>5.poznámka</emphasis>
                            Prkíklad ako čítať atribút<citation>07</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>6.poznámka</emphasis>
                            Tu pridávame nový element do objektu MapType. Tento element je 
                            platný pre túto mapu, pretože jeho východzia hodnota je reťazec String<citation>07</citation>.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>7.poznámka</emphasis>
                            Teraz zmeníme hodnotu novo pridaného atribútu.
                            JMX vyžaduje aby nová hodnota bola zabalená do objektu
                            typu Attribute, ktorá nesie zároveň meno aj novú hodnotu
                            pre atribút<citation>07</citation>.
                        </para>
                    </listitem>
                </itemizedlist>
                <sect3>
                    <title>Poznámky k pridávaniu modulu do Heritrixu</title>
                    <para>
                        Aby bol nový modul rozpoznaný Heritrixom, je nutné sa o 
                        ňom zmieniť vo vhodnom konfiguračnom súbore (cesta src/conf/modules).
                        Ak je nový pridávaný modul Processor, musíte sa o ňom 
                        zmieniť v súbore Procesors.opions. Tento súbor sa pri
                        zostavovaní aplikácke pridá do knižnice heritrixu Heritrix.jar
                        <citation>07</citation>.
                    </para>
                    <para>
                        Ak pri pridávaní nového modulu používate nejakú 
                        knižnicu, je nevyhnutné aby bola zmienená v konfiguračných
                        súboroch Heritrixu, ktoré používa zostavovací nástroj Maven 1.
                        Rovnako ak celý nový modul zabalíte 
                        do knižnice jar, stačí ju pridať do adresára 
                        $HERITRIX_HOME/lib a zapísať nový modul do konkrétneho
                        konfiguračného súboru v adresári /src/conf/modules.
                    </para>
                </sect3>
            </sect2>
        </sect1>
        <sect1>
            <title>Napísanie modulu Frontier</title>
            <para>
                Ako bolo spomenuté, Frontier je prídavný modul, ktorý je zodpovedný
                za rozhodnutie, ktorá URI bude spracovaná ako nasledujúca a kedy.
                Frontier je taktiež zodpovedný za urdžovanie celkového vnútorného stavu
                procesu plazenia po webových stránkach a je vhodným miestom 
                pre vytváranie reportov a logovanie aktuálneho stavu. Frontier je
                jeden z najzložitejších modulov, preto je lepšie pred jeho modifikovaním
                premyslieť všetky ostatné alternatívy, ktoré by sa vyhli úpravam v
                module Frontier<citation>08</citation>.
            </para>
            <para>
                All Frontiers must implement the Frontier interface. Most Frontiers
                will also implement the FetchStatusCodes because these codes are used
                to determine what to do with a URI after it has returned from the 
                processing cycle<citation>08</citation>.
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="frontier1.png"/>
                </imageobject>
            </mediaobject>
            <para>
                The most important methods in the Frontier interface are:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>next(int timeout)</emphasis> -
                        Metóda next je volaná objektom ToeThread, ktorý predstavuje vlákno, ktoré
                        má vždy pridelenú práve jednu URI s ktorou pracuje. Pri volaní sa najprv
                        skontroluje či sú nejaké URI čakajúce na spracovanie. Metóda taktiež 
                        zaisťuje aby boli najprv spracované nevyhnutné URI, pred ostatnými radovými
                        čakajúcimi URI. To umožňuje, že sa najprv spracujú DNS záznamy a súbory
                        robots.txt, predtým než sa z konkrétneho hostu získajú nejaké dáta.
                        Následne sa vybraná URI reprezentovaná objetkom CandidateURI sa premení na
                        objekt CrawlURI, vhodný na spracovanie procesormi<citation>08</citation>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>schedule(CandidateURI caURI)</emphasis> -
                        Keď je URI spracovaná reťazou procesorov, tak končí v objekte LinksScoper.
                        Všetky URI by tu mali skončiť, aj keď nespĺňali predpoklady na to 
                        aby boli spracované alebo činnosti získanie dát z hostu, extrakcia odkazov, či
                        zapisovanie do arcu boli odložené.
                        LinksScoper iteruje cez všetky nové URI adresy, nájdené v 
                        kontexte danej CrawlURI a ak vyhovujú požiadavkom skúmanej 
                        oblasti, tak ich prekonvertuje z objektov Link na CandidateURI.
                        Neskôr v reťazi postprocessor chain, FrontierScheduler ich 
                        pridá do objetku Frontier, volaním metody schedule(CandidateURI).
                        Metóda schedule pred pridávaním CandidateURI kontroluje, či už nebola
                        daná URI pridaná predtým, čím sa dosiahne toho, že každá URI 
                        bude spracovávaná iba raz. Ak bola URI označnená nejakým procesorom ako
                        URI, ktorá potrebuje okamžité spracovanie, tak sa pridá do 
                        fronty prednostných URI<citation>08</citation>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>finished(CrawlURI cURI)</emphasis> -
                        Až všetky procesory skončia, vrátane FrontierScheduler, tak 
                        vlákno ToeThread volá metodu finished(CrawlURI) objektu Frontier, s 
                        parametrom CrawlURI, ktorá práve prešla celým procesom.
                        Ak sa URI úspešne spracovala, tak sa aktulizujú štatistiky a volá
                        sa metóda stripToMinimal(), ktorá odstráni všetky nepotrebné dáta 
                        zozbierané pri spracovávaní danej CrawlURI.
                        Ak URI bolo odložená, pretože zatiaľ nespĺňala nejaké podmienky, tak sa 
                        znovu naplánuje na neskoršie spracovanie (napr. veľké zaťaženie
                        urťitého serveru, URI sa naplánuje na neskoršie spracovanie aby
                        Heritrix nezaťažoval server). V metóde sa nakoniec kontroluje
                        stav URI, ktorý jej nastavujú procesory. Ak URI má niektorý
                        zo stavov, ktorý nespĺňa nami definované požiadavky alebo 
                        prekračuje iné stanovené limity, tak sa spracovanie tejto URI
                        označi za zlyhané a tento stav sa poznačí do logu a URI 
                        sa zabudne<citation>08</citation>.
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>
        <sect1>
            <title>Napísanie modulu Filter</title>
            <para>
                Filtery sú objekty, ktoré vezmú CrawlURI a určia, či spĺňa kritéria filtru.
                Ak áno vrátia logickú hodnotu true inak false<citation>09</citation>.
            </para>
            <para>
                Filter môže byť použitý na viacerých miestach v procese plazenia webových stránok.
                Najväčšie využitie filterov je v objektoch Scope, ale sú tiež použité v procesoroch, aby
                vyfiltrovali nehodiace sa URI. To znamená, že hocijaká URI, ktorá 
                neprejde filtrom v danom procesore tento procesor preskočí. To môže 
                byť užitočné pri zabránení extrahovaní odkazov z dokumentov, ktoré
                pochádzajú zo špecifickej oblasti webových stránok 
                (napr. vulgárne, pornografické stránky)<citation>09</citation>.
            </para>
            <para>
                Všetky filtre by mali dediť triedy Filter. Vytvorenie filtra je záležitosť
                implementovanie jednej metódy innerAccepts(Object). Pri vytvorení
                filtra je nutné sa o ňom zmieniť v súbore src/conf/modules/Filter.options, 
                aby ho Heritrix bol schopný rozoznať<citation>09</citation>.
            </para>
        </sect1>
        <sect1>
            <title>Napísanie modulu Scope</title>
            <para>
                Instancia objektu CrawlScope definuje, ktoré URI sú v rámci nášho záujmu.
                Je to v podstate filter, ktorý sa pozerá na maximálne množstvo informácií o 
                danej URI, aby určil, či má byť naplánovaná na spracovanie alebo nie.
                Informácia, ktorá určuje z ktorej URI bola aktuálna URI objavená, by
                mala byť braná do úvahy, zatiaľ čo dočasné informácie ako robots.txt alebo
                história pokusov spracovať rovnakú URI by sa nemali uvažovať. Tieto
                časovo náročné rozhodnutia by sa mali uskutočňovať v inom mieste
                výpočtu.
            </para>
            <para>
                Všetky triedy Scope by mali dediť triedu CrawlScope. Namiesto preťaženia metódy
                innerAccepts(), čo sa robí pri písaní modulu Filter, trieda CrawlScope túto
                metodu implementuje, a preto poskytuje niekoľko iných metód, ktoré môžu byť
                preťažené. Trieda CrawlScope poskytuje zoznam vylučujúcich filtrov, ktoré môžu
                byť nastavené pre každý scope. Ak hocijaký z vylučovacích filtrov zachytí
                URI, tak URI bude považovaná za "out of scope". Implementácia metody
                innerAccpets() môže vyzerať takto:
            </para>
            <programlisting><![CDATA[
protected final boolean innerAccepts(Object o) {
    return ((isSeed(o) || focusAccepts(o)) || additionalFocusAccepts(o) ||
            transitiveAccepts(o)) && !excludeAccepts(o);
}                
            ]]></programlisting>
            <para>
                Výsledok je, že skontrolovaná URI je považovaná za "in scope", ak je semienko alebo
                je akceptovaná niektorým z focusAccpets, additionalAccepts alebo transitiveAccepts, 
                pokiaľ nieje vylúčená niektorým z vylučovacích filtrov.
            </para>
            <para>
                Pri písaní vlastného scope, by ste mohli preťažiť hlavne tieto metódy:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>focusAccepts(Object)</emphasis> -
                        focus filter by mohol predstavovať prvotnú analýzu pomocou regulárnych výrazov.
                        Typické varianty focus filtra sú:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>broad:</emphasis> prijať všetko
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <emphasis>domain:</emphasis> prijať ak je na rovnakej doméne ako semienko
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <emphasis>host:</emphasis> prijať ak je na rovnakom hoste ako semienko
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <emphasis>path:</emphasis> prijať ak je na rovnakom hoste a má zhodný prefix ako semienko
                            </para>
                        </listitem>                        
                    </itemizedlist>
                    <para>
                        Implementácia nových scope by mohla dediť niektoré z týchto scope.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>additionalFocusAccepts(Object)</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>transitiveAccepts(Object)</emphasis> - 
                    </para>
                </listitem>
            </itemizedlist>      
        </sect1>
        <sect1>
            <title>Napísanie modulu Processor</title>
            <para>
                Všetky procesory rozširujú triedu org.archive.framework.Processor. 
                Je to vlastne kompletná trieda a môže byť použitá ako validný procesor,
                ale v skutočnosti nič nerobí.
            </para>
            <para>
                Rozširujúce triedy musia prepísať metódu innerProcess(CrawlURI) aby 
                pridali potrebnú funkcionalitu. Toto je metóda, ktorá je zavolaná 
                nad každou URI ktorá sa spracováva.
            </para>
            <para>
                Metóda innerProcess používa objekt CrawlURI, ktorý je predaný ako parameter
                a objekt HttpRecorder, ktorý je zabalený v objekte CrawlURI.
            </para>
            <para>
                Objekty Fetcher (FetchHTTP, FetchFTP, ...) získajú relevantný dokument
                a zapíšu jeho obsah do objektu HttpRecorder. Objekty Extractor 
                (HTMLExtractor, CSSExtractor, ...) čítajú objekt HttpRecorder a 
                pridávajú objevené odkazy do zoznamu odkazov nájdených na danej CrawlURI.
                Nie všetky procesory musia používať objekt HttpRecorder.
            </para>
            <para>
                Niekoľko iných metód môže byť prepísaných na špeciálne účely:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>initialTasks()</emphasis>
                        Táto metóda bude volaná až bude nastavený celý proces plazenia, ale predtým než
                        bude nejaká URI spracovaná. Je to vlasnte inicializačný kód, ktorý
                        musí byť spustený práve jeden krát pri štarte plazenia webu.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>finalTasks()</emphasis>
                        Táto metóda bude zavolaná po tom ako bude spracovaná posledná URI.
                        Je to na samom konci plazenia webu a znamená to, že proces 
                        je normálne ukončený. V podstate je to miesto, kde sa môže
                        napísať finalizačný kód.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>report()</emphasis>
                        Táto metóda vracia reťazec, ktorý obsahuje ľudsky čitateľnú správu o
                        stave alebo progrese procesu plazenia webu. Táto správa je 
                        prístupná cez webové uživateľské rozhranie. Procesor by 
                        mohol informovať o počte CrawlURI, ktoré spracoval alebo
                        počte odkazov, ktoré objavil (procesor Extractor) alebo
                        hocijaké iné relevantné informácie daného procesoru.
                    </para>
                </listitem>
            </itemizedlist>
            <sect2>
                <title>Pristupovanie a aktualizovanie CrawlURI</title>
                <para>
                    Objekt CrawlURI obsahuje celkom veľa dát.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>getAlist()</emphasis>
                            Táto metóda vracia objekt "AList" danej CrawlURI.
                        </para>
                        <para>
                            AList je v podstate hash mapa. Je použitá namiesto Java HashMap pretože je efektívnejšia, hlavne pri
                            serializácií. Kľúče k hodnotám a objektom umiestnené v AList sú definované v CoreAttributeConstants.
                        </para>
                        <para>
                            Prehlľad najpoužívanejších CoreAttributeConstants:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>A_CONTENT_TYPE</emphasis>
                                    Extraktovaný MIME type stiahnutého obsahu. Mal by byť nastavený ihneď s fetch modulom (FetchHTTP).
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>LINK COLLECTIONS</emphasis>
                                    Tu sú viaceré kolekcie Java Collection obsahujúce extraktované URI z rôznych zdrojov. Každý odkaz je 
                                    Link obsahujúci extraktovanú URI. URI môže byť relatívna. Modul LinksScoper bude čítať tento list
                                    a konvertovať objekty, ktoré sú "in scope" Link na objekty CandidateURI, aby boli pridané do modulu
                                    Frontier pomocou FrontierScheduler.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>setHttpRecorder(HttpRecorder)</emphasis>
                            Nastavuje HttpRecorder, ktorý obsahuje stiahnutý obsah. Zvyčajne to vykonáva fetching processor.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>getHttpRecorder()</emphasis>
                            Metóda, ktorá získa stiahnutý obsah.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>getContentSize()</emphasis>
                            Ak bol dokument úspešne stiahnutý, táto metóda vráti jeho dĺžku v bytoch.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>getContentType()</emphasis>
                            Mime type stiahnutého obsahu.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect2>
            <sect2>
                <title>HttpRecorder</title>
                <para>
                    HttpRecorder je pripojený ku každej CrawlURI, ktorá bola úspešne stiahnutá pomocou FetchHTTP procesoru.
                    Procesory, ktoré sa zaujímajú o textový obsah stiahnutej CrawlURI môžu k nej pristupovať pomcou
                    metódy getReplayCharSequence(), ktorá vracia objekt java.langCharSequence, ktorý sa dá
                    normálne čítať.
                </para>
            </sect2>
            <sect2>
                <title>Poznámky k písaniu modulu Processor</title>
                <para>
                    Pre každý procesor je vytvorená iba jedna instancia počas celého
                    procesu plazenia po webe. Keďže je Heritrix multivláknová aplikácia, 
                    tak musí byť procesor napísaný správne aby nedochádzalo ku konfliktom.
                </para>
            </sect2>
        </sect1>
    </chapter>
    <chapter>
        <title>Návrh a Integrácia</title>
        <sect1>
            <title>Integracia</title>
            <para>
                Podľa popisu funkčnosti Heritrixu je nutné vhodne integrovať systém WebAnalyzer, tak
                aby sme dosiahli požadovaných výsledkov. Modul WebAnalyzer musí každopádne
                spracovávať každú URI, ktorá prejde procesom plazenia webu. Preto je 
                potrebné integrovať WebAnalyzer do niektorého z modulov.
                Prvá predstava bola navrhnút a naimplementovať modul WebAnalyzer, vo forme
                knižnice .jar, ktorá bude poskytovať definované rozhranie, s ktorým 
                bude niektorý z modulov spolupracovať a používať jeho služby.
                WebAnalyzer by mal jednoducho vziať na vstupe URI, o ktorej na základe
                svojich funkcií a definovaných požiadavkov určí, či je bohemikálna alebo nie.
                Najoptimálnejsí výstup systému WebAnalyzer pre danú URI je
                logická hodnota, ktorá signalizuje, či spracovávaná URI je 
                bohemikálna alebo nie. Teraz ostávalo zistiť, ktorý modul bude
                ten najvhodnejší pre integráciu s WebAnalyzerom. 
            </para>
            <para>
                WebAnalyzer by mal pri spracovávaní URI dostať na vstup 
                konkrétnu URI a čo najviac informácií, ktoré Heritrix pri 
                jej spracovávaní získal.
            </para>
            <para>
                Integrácia s modulom Frontier neprichádza do úvahy, pretože
                Frontier má prístup k URI, práve na samom začiatku spracovania
                alebo na úplnom konci. Ani jedna z ponúkaných možností nie je
                vyhovujúca. 
                Pred samotným spracovaním URI Heritrix pozná 
                minimum informácií, medzi ktoré patrí názov samotnej URI, názov
                URI na ktorej bola aktuálna URI objavená a nejaké informácie o 
                servery, na ktorom sa URI nachádza. V tomto stave nemáme prístupný
                dokonca ani textový obsah, ktorý získajú až procesory FetchHTTP.
                Naopak na úplnom konci spracovania Heritrix zistil o URI maximálne 
                množstvo informácií, ktoré by mohli byť pre WebAnalyzer hodnotné.
                Keby sme nasadili WebAnalyzer v tomto stave a analyzovali, 
                bohemikálnosť URI, tak by sme prišli o možnosť archivovať bohemikálne URI.
                Archivácia sa totiž vykonáva procesorom ARCWriter, ktorý vstupuje
                do činnosti skôr ako skončí URI v objekte Frontier.
                Ani jedna z týchto možností, ktoré poskytuje Frontier nie je
                vyhovujúca.
            </para>
            <para>
                Z predchádzajúcich úvah vyplýva, že ak chceme využiť funkcionalitu
                archivovania, ktorú Heritrix ponúka, musíme WebAnalyzer umiestniť niekde
                pred týmto procesorom, ktorý archivuje spracovávané URI. 
            </para>
            <para>
                Následne sa ponúka možnosť integrovať WebAnalyzer do modulu Filter, ktorý pri
                spracovávaní každej URI určuje, či spĺňa definované kritéria alebo nie. Filter
                môže byť použitý na viacerých miestach procesu spracovania URI, takže by nebol 
                problém umiestniť ho tesne pred modul archivovania a pomocou WebAnalyzeru
                určit, či je aktuálna URI bohemikálna alebo nie. Podľa tohoto rozhodnutia by 
                ju potom mohol následujúci procesor archivovať. Pokus sa však ukázal, že
                ani filter nie je vhodným modulom. WebAnalyzer pri analyzovaní používa viacero
                projektov a knižníc, s ktorými spolupracuje. Funkcionalita týchto podsýstemov
                WebAnalyzeru vyžaduje, aby bol WebAnalyzer pred samotným spustením
                nainicializovaný. Tým pádom je nutné vždy pred jeho používaním zavolať jeho 
                metodu initializeWebAnalyzer(), ktorá zabezpečí, že sa otvoria a nainicializujú
                všetky spojenia k externým súborom, databázam a indexom, ktoré WebAnalyzer používa.
                Taktiež je nutné pri skončení používania zavolať metodu closeWebAnalyzer(), ktorá
                tieto spojenia opäť uzavrie. To znamená, že v čase keď začna filter pracovať, 
                WebAnalyzer už musí byť nainicializovaný. Bola tu možnosť inicializovať WebAnalyzer
                v čase vytvárania objektu Frontier, ale nakoniec sa to ukázalo zbytočne zložité.
            </para>
            <para>
                Ďalšia možnosť bola integrácia s modulom Scope. Modul Scope rozhoduje, ktorá
                URI je "in scope" a ktorá nie, je to v podstate obdoba modulu filter.
                Scope sám o sebe poskytoval 
                metódy, initialize() a finalize(), ktoré sa dali preťažiť a mohol by sa v nich
                inicializovať a zatvárať objekt WebAnalyzer. Taktiež umiestnenie modulu pred
                procesorom na archiváciu vyhovovalo. Scope sa zdal vyhovujúcim ale na základe 
                toho, že Internet Archive mal v pláne modul scope úplne preorganizovať a 
                zrefaktorovať v ďalšej verzii Heritrixu, tak sme skúsili ešte inú možnosť.
            </para>
            <para>
                Poslednou a konečnou možnosťou bola integrácia do modulu Processor. Ktorá sa 
                ukázala byť najviac vyhovujúcou. Procesor sa vyskytuje v niekoľkých vartiantách
                ako sme spomenuli v sekcii Processor todo odkaz. Heritrix definuje niekoľko 
                reťazí proceserov. Pre WebAnalyzer je bolo najvýhodnejšie umiestniť procesor 
                do reťaze Extractor processing chain. Prvé dve reťaze Pre-fetch processing chain
                a Fetch processing chain neboli vyhovujúce pretože v tom čase ešte nemáme 
                textový obsah URI, ktorý môže WebAnalyzer použiž na analýzu textu. Textový 
                obsah URI je dostupný až po skončení reťaze Fetch-processing chain. Nasledujúca
                reťaz Extractor processing chain obsahuje procesory nazvaná Extractor, ktorých
                hlavné úloha je extraktovať zo získaného textu URI všetky odkazy. Nachádzajú sa
                tam extractory typu ExtractorHTML, ExtractorCSS a podobné. Keďže objavené kolekcia
                objavených odkazov mohla byť ďalšou hodnotnou informáciou pre WebAnalyzer, bolo
                nutné umiestniť WebAnalyzer do procesu, ktorý by sa nachádzal na samom konci
                tejto reťaze, keď už bude všetky možné odkazy na URI objavené.
                Nasledujúca reťaz po Extractor-processing chain je Write/index-processing chain, ktorej
                hlavnou úlohou je archivovať URI. Úplne posledná reťaz procesorov je Post-processing
                chain, ktorá skúma a vyhadzuje odkazy "out of scope" a z odkazov "in scope"
                vytvára CandidateURI, ktoré následne predáva objektu Frontier, ktorý predstavuje
                koniec spracovania danej URI.
            </para>
            <para>
                Processor Extractor rovnako ponúka metódy initialize() a finalize(), ktoré
                sa volali vždy práve jeden krát počas celého procesu plazenia webu. Tieto
                instancie procesorov sú potom volané jednotlivými vláknami ToeThread, ktoré sa 
                starajú o spracovanie práve jednej URI. V týchto metódach je možné jednoducho
                zavolať inicializačnú aj zatváraciu metódu WebAnalyzeru, čím sa nám zaistí, že
                WebAnalyzer sa správne nainicializuje aj uzavrie spolu s procesorom, v ktorom 
                bude integrovaný. Hlavná metóda procesoru innerProcess(CrawlURI), ktorá sa 
                vykonala vždy bola ideálnym kandidátom na volanie služieb poskytovaných
                systémom WebAnalyzer. 
            </para>
            
            <sect2>
                <title>ExtractorWebAnalyzer</title>
                <para>
                    Pri integrácií som vytvoril nový procesor v reťazi Extractor processing chain.
                    Extractor sa nazýva ExtractorWebAnalyzer a je to potomok triedy Extractor, ktorá
                    je zas potomkom triedy Processor. ExtractorWebAnalyzer bude 
                    jediný modul Heritrixu, ktorý bude priamo pracovať so systémom WebAnalyzer.
                    Systém WebAnalyzér ponúka v podstate 4 metódy, ktoré používa ExtractorWebAnalyzer.
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis>initialize()</emphasis> -
                            Metóda, ktorá inicializuje instanciu WebAnalyzer. 
                            Pre celý proces plazenia weby sa použije práve jedna instancia WebAnalyzeru.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>isContetTypeText(curiName)</emphasis> -
                            Metóda, ktora zistí Mime Type predanej URI, podlľa jej názvu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>run(urlName, urlContent, urlOutlinks, contentType)</emphasis> -
                            Metóda, ktorá spustí analýzu konkrénej URI. WebAnalyzer využíva 
                            pri analýze názov URI, textový obsah URI, objavené odkazy a typ
                            Mime.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>close()</emphasis> -
                            Metóda, ktorá uzavrie všetky spojenia používané systémom WebAnalyzer.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Pri testovaní tejto verzie sme dosiahli, že každá jedna URI bola
                    analyzovaná našim WebAnalyzerom. Na základe rozhodnutia WebAnalyzeru
                    sme v procesore ExtractorWebAnalyzer nastavili, ktorá URI sa má
                    archivovať a ktorá má naopak procesor na archivovanie preskočiť.
                    Tým sme dokázali archivovať všetky URI, ktoré WebAnalyzer identifikoval
                    ako bohemikálne.
                </para>
            </sect2>
            <sect2>
                <title>Nedostatky prvej verzie integrácie WebAnalyzeru</title>
                <para>
                    Počas testovania prvej verzie sa objavilo mnoho nedostatkov,
                    ktoré si vyžadovali ..... viac popracovať na integrácií.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>archivácia obrázkov</emphasis> - 
                            Pri archivácií bohemikálnej stránky sa nearchivovali obrázky
                            a css štýly, tým bola stránka veľmi ochudobnená. Každý obrázok
                            a hociktorý iný zdroj na stránke je samostatnou URI adresou
                            spracovávanou nezávisle na ostatných URI adresách. Preto je nutné
                            aby si systém pamätal, ktoré URI sú obrázky z už archivovaných 
                            bohemikálnych stránok a archivoval ich tiež.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>archivácia odkazov</emphasis> - 
                            Podobný problém ako s obrázkami vznikol pri odkazoch. 
                            Pri identifikácií vznikla požiadavka, aby systém okrem 
                            samotnej bohemikálnej stránky archvival automaticky aj všetky
                            odkazy, ktoré sa na tejto stránky vyskytujú a to do určitej úrovne.
                            To znamená, že bolo nutné definovať do akej hĺbky od bohemikálnej
                            stránky sa majú referencované stránky automaticky archivovať.
                            Tieto referencované stránky z bohemikálnych URI by mohli 
                            byť hodnotným zdrojom a preto je zájem ich automaticky archivovať.
                            Opäť bolo nutné aby si systém pamätal, z ktorej rodičovskej URI bola
                            aktuálna URI objavená a či tá rodičovská URI bola identifikovaná
                            ako bohemikálna. Ak áno tak systém ju mal automaticky archivovať.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>analyzovanie binárneho obsahu</emphasis> - 
                            Pri testovaní záznamy z logu ukazovali, že WebAnalyzer analyzuje
                            aj binárny obsah, čo je nežiadúce pretože textová analýza 
                            obrázku nedáva zmysel. Napriek tomu, že v procesore ExtractorWebAnalyzer 
                            bolo jasne definované, aby WebAnalyzer analyzoval iba dokumenty 
                            s textovým obsahom, sa v logu objavili analýzy dokumentov
                            rôzneho Mime Typu (audio, video, image a iné application).
                            Bolo teda nutné precízne identifikovať typ dokumentu aby sa
                            predišlo nezmyslených analýzam, ktoré boli dôvodom mnohých
                            ďalších chýb.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>výnimka OutOfMemory</emphasis> - 
                            Počas testovania Heritixu sa mnoho krát objavila výnimka 
                            OutOfMemory. Z logu sa dalo vyčítať že dôvodom bola práve analýza
                            textového obsahu rôznych dokumentov typu audio video a iné, ktorých
                            veľkosť bola v stovkách MB. Pri analýze sa vytvárali objety
                            java.lang.String ktoré zaberali mnoho pamäte a spôsobovali
                            výnimku OutOfMemory. To bol ďalší dôvod aby bola riadne zabezpečená
                            identifikácia typu dokumentu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>archivovanie DNS záznamov</emphasis> - 
                            Keďže procesor nespracováva DNS záznamy, tak sa automaticky
                            archivujú. Pre nás sú však zbytočné a preto ich archivovať
                            nebudeme. Problém spätného archivovania, keď sa analyzuje
                            stránka, jej DNS záznam je už dávno archivovaný. Dočasné
                            riešenie je nearchivovať DNS záznamy.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>todo</emphasis> - 
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis>todo</emphasis> - 
                        </para>
                    </listitem>                
                </itemizedlist>
            </sect2>
            <sect2>
                <title>Integracia pomocou viacerých modulov</title>
                <para>
                    Na základe nedostatkov z prvej otestovanej verzie, vznikli ďalšie
                    požiadavky, ktoré by mal systém splňovať. Na základe nových
                    požiadavkov vznikol use case diagram, ktorý popisuje
                    integráciu modulu WebAnalyzer so systémom Heritrix. Integrácia
                    je realizovaná pomocou modulov ExtractorWebAnalyzer, 
                    LinksScoperWebAnalyzer a ARCWriterProcessorWebAnayzer, ktoré
                    sú súčasťou Heritrixu. Procesor ExtractorWebAnalyzer je jediný, 
                    ktorý používa rozhranie modulu WebAnalyzer.
                    Užívateľ má možnosť pred spustením Heritrixu definovať vlastnosti 
                    modulu WebAnalyzer prostredníctvom súboru webanalyzer.properties.
                </para>
                <figure>
                    <title>Use case diagram integrácie systému Heritrix a WebAnalyzer</title>                    
                    <mediaobject>
                        <imageobject>
                            <imagedata format="PNG" scale="50" fileref="usecase1.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>                
                <sect3>
                    <title>Archivovanie DNS záznamov</title>
                    <para>
                        Pred spracovaním ľubovoľnej stránky z konkrétneho hostu
                        sa najprv získa DNS záznam. Ten je spracovaný procesorom
                        PreconditionEnforcer, ktorý overuje či sú splnené všetky
                        požiadavky pre nasledujúce spracovanie danej URI ( napr.
                        DNS, robots.txt). ARCWriterProcessor tieto DNS záznamy
                        automaticky archivuje. Pre nás je však zbytočné archivovať
                        všetky DNS záznamy. Stačia nám len tie DNS, ktorých URI 
                        sú identifikované ako bohemikálne. Tohoto stavu je však 
                        obtiažne dosiahnuť, pretože samotná identifikácia URI prebieha až
                        po archivovaní DNS záznamu. Riešením by bolo archivovať DNS
                        záznam dodatočne až po identifikácií URI. 
                    </para>
                    <para>
                        Tento problém 
                        zatiaľ nemá vysokú prioritu a preto použijeme vlastný
                        procesor ARCWriterProcessorWebAnalyzer, ktorý jednoducho
                        nebude archivovať DNS záznamy.
                    </para>
                </sect3>
                <sect3>
                    <title>Výnimka OutOfMemory a analyzovanie binárneho obsahu</title>
                    <para>
                        Pri spracovaní dochádzalo pomerne často k výnimke typu 
                        OutOfMemory spôsobenej v dôsledku analyzovania dokumentov, 
                        ktorých MimeType bol chybný. 
                    </para>
                    <para>
                        Staré typy serverov, ktoré nevedeli rozoznať typ
                        dokumentu automaticky nastavovali pre tieto dokumenty 
                        MimeType typu text/plain. V skutočnosti to však mohol
                        byť dokument s MimeType typu video, audio alebo application, 
                        ktorých veľkosť sa pohybuje v rádovo stovkách MB.
                        Pri textovej analýze takýchto falošných "textových" dokumentov
                        modulom WebAnalyzer sa vytvárajú 
                        enormne veľké objekty java.lang.String, ktoré spôsobujú
                        výnimku OutOfMemory.
                        ExtractorWebAnalyzer kontroluje MimeType všetkých dokumentov, 
                        pred tým než začne analýza modulom WebAnalyzer. Funkčnosť
                        Heritrixu, ktorú používa ExtractorWebAnalyzer na určenie 
                        MimeType dokumentu evidentne nie je dostatočná a preto 
                        bolo nutné vytvoriť podsystém MimeTypeDetector, ktorý 
                        identifikuje správny MimeType dokumentu. MimeTypeDetector
                        je nutné umiestniť do procesoru ExtractorWebAnalyzer pred
                        spustením modulu WebAnalyzer, aby sa predišlo analýzam
                        binárnych dokumentov. vid mimetypedetector
                    </para>
                </sect3>
                <sect3>
                    <title>Archivácia odkazov a obrázkov</title>
                    <para>
                        Predchádzajúca verzia systém archivuje len tie URI, ktoré 
                        WebAnalyzer identifikoval ako bohemikálne. Všetky ostatné
                        URI (URI obrázkov, css  súborov a iných odkazov bohemikálnej
                        stránky) sa nearchivujú. My však potrebujeme archivovať
                        nielen zdroje bohemikálnej stránky (obrázky, css) ale aj 
                        odkazy z tejto stránky a to do určitej úrovne. Odkazy vedúce
                        z bohemikálnej stránky pravdepodobne nesú hodnotné informácie.
                    </para>
                    <figure>
                        <title>Archivovanie odkazov do hĺbky 2</title>                    
                        <mediaobject>
                            <imageobject>
                                <imagedata format="PNG" scale="50" fileref="depth.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                    <para>
                        Obrázok ukazuje strom, ktorého koreň je bohemikálna stránka
                        a jej listy sú odkazy z tejto stránky. Pri definovanej 
                        hĺbke 2 by sa mali všetky odkazy, obrázky a iné zdroje 
                        vedúce z bohemikálnej stránky automaticky archivovať do
                        tejto úrovne. Pri archivovaní odkazov 2. úrovne
                        však budú tieto URI opäť bez obrázkov, css a iných zdrojov.
                        Preto musíme archivovať aj 3. úroveň s omedzením na 
                        dokumenty typu text/html. Tým zabezpečíme, že každá archivovaná
                        stránka bude mať v arc súboroch aj svoje obrázky, css štýly, 
                        audio a video nahrávky a iné zdroje. Definovanie hĺbky
                        môže nastaviť užívateľ pres spustením celého procesu.
                    </para>
                    <para>
                        Archivácia odkazov z bohemikálnych stránok do určitej hĺbky 
                        sa dala zrealizovať upraveným modulom LinksScoper a  
                        ExtractorWebAnalyzer.
                        Veľkou pomôckou boli objekty CrawlURI a CandidateURI, 
                        ktoré obsahujú objekt AList, čo je zoznam objektov pridružených k
                        danej URI. Do tohto zoznamu je možné pridať hocijaký objekt, ku 
                        ktorému môžeme pristupovať v ľubovoľnom module. Na základe týchto
                        príznakov si Heritrix môže zapamätať, ktoré URI sú bohemikálne, 
                        ktoré URI sú validnými odkazmi z bohemikálnych stránok alebo
                        URI, ktoré sú obrázky, css štýly či iné zdroje asociované s
                        bohemikálnymi stránkami. Týmto spôsobom môžeme všetky typy URI odkazované z 
                        bohemikálnej stránky archivovať a to do určitej úrovne, ktorú
                        si môže užívateľ sám zvoliť.
                    </para>
                    <para>
                        Realizácia si vynútila vytvorenie nového modulu
                        LinksScoperWebAnalyzer, ktorý je potomkom modulu 
                        LinksScoper, ale dopĺňa funcionalitu na spracovanie 
                        odkazov z bohemikálnych stránok.
                    </para>
                    <para>
                        Postup archivovania odkazov z bohemikálnych stránok
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis>1. Frontier next(int Timeout)</emphasis> - 
                                Každá CrawlURI vstupuje do procesu z objektu Frontier.
                                Zavolaním jeho metody next() si vlákno ToeThread vezme
                                nasledujúcu CrawlURI, ktorá potom putuje procesormi.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis>2. ExtractorWebAnalyzer innerProcess(CrawlURI curi)</emphasis> - 
                                Keď CrawlURI dosiahne procesor ExtractorWebAnalyzer, tak sa zisťuje
                                či má nastavený nejaký príznak, podľa ktorého sa odvíja ďalšie 
                                spracovanie.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>2.1 CrawlURI NO FLAG</emphasis> - 
                                        CrawlURI nemá nastavený žiadny príznak. Bude následne 
                                        identifikovaný jej MimeType pomocou modulu WebAnalyzer.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>2.2 CrawlURI FLAG=valid_link, DEPTH=x</emphasis> - 
                                        CrawlURI má nastavený príznak <emphasis>valid_link</emphasis>, ktorý
                                        definuje, že táto URI bola odkazom z bohemikálnej stránky a má sa 
                                        okamžite archivovať. Nie je nutné robiť jej analýzu. Putuje rovno do
                                        procesoru ARCWriterProcesorWebAnalyzer, ktorý ju archivuje. Príznak
                                        <emphasis>DEPTH=x</emphasis>, definuje do akej hĺbky sa majú odkazy
                                        nájdené z tejto URI automaticky archivovať. Táto hĺbka sa znižuje s 
                                        každou archivovanou úrovňou. (definované užívateľom).
                                    </para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>2.3 CrawlURI FLAG=archive_bin_link, DEPTH=0</emphasis> - 
                                        CrawlURI s príznakom <emphasis>archive_bin_link</emphasis> definuje, že
                                        táto URI je odkazom z bohemikálnej stránky, ale v stromovej štruktúre
                                        predstavuje list (viď obrázok hore). To znamená, že sa vykonala
                                        archivácia všetkých uzlov vedúcich z bohemikálnej stránky (koreňa)
                                        do definovanej hĺbky. V listoch však môžu existovať odkazy na obrázky, 
                                        css štýly a iné zdroje, ktorý by chýbali v už archivovaných uzloch.
                                        Preto je nutné z týchto listov archivovať všetky dokumenty okrem tých, 
                                        ktorých MimeType je text/html. Týmto dosiahneme archiváciu obrázkov a 
                                        css štýlov.
                                    </para>
                                    <itemizedlist>
                                        <listitem>
                                            <para><emphasis>2.3.1 CrawlURI Content type=text/css, DEPTH=0</emphasis> - 
                                                Ak je CrawlURI s príznakom <emphasis>archive_bin_link</emphasis> dokument
                                                typu css, tak sa automaticky archivuje. Okrem toho sa pre túto CrawlURI
                                                nastaví príznak <emphasis>valid_link</emphasis> a <emphasis>depth=0</emphasis>, 
                                                čím sa zabezpečí, že sa odkazom z css dokumentu pri spracovaní procesorom
                                                LinksScoperWebAnalyzer nastaví príznak <emphasis>archive_bin_link</emphasis>.
                                                Pri následnom neskoršom spracovaní sa tieto odkazy z css dokumentu archivujú.                                            
                                                Tým sa zabezpečí že budú archivované aj obrázky nachádzajúce sa v css dokumente, 
                                                ktoré by inak chýbali.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>2.3.2 CrawlURI Content type=other</emphasis> - 
                                                CrawlURI s príznakom <emphasis>archive_bin_link</emphasis>, ktorých MimeType
                                                je iný ako text/html sa taktiež archivujú. Tým dosiahneme archiváciu obrázkov
                                                a iných multimediálnych dokumentov, ktoré sa nachádzajú na už archivovaných
                                                stránkach.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>2.3.2 CrawlURI Content type=other</emphasis> - 
                                                CrawlURI s príznakom <emphasis>archive_bin_link</emphasis>, ktorých MimeType
                                                je text/html sa už archivovať nebudú a rovnako sa nebudú nastavovať žiadne príznaky
                                                pre odkazy na tejto stránke. To by už znamenalo presiahnutie definovanej hĺbky zadanej
                                                užívateľom.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>                            
                        </listitem>
                        <listitem>
                            <para><emphasis>3. MimeTypeDetector isContentTypeText(curi.getName())</emphasis> - 
                                CrawlURI, ktorá nemala nastavený žiadny príznak je identifikovaná modulom
                                MimeTypeDetector, ktorý je súčasťou modulu WebAnalyzer. Na základe 
                                získaného MimeType sa CrawlURI vydá dvomi rôznymi cestami.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>3.1 CrawlURI Content type=other</emphasis> - 
                                        CrawlURI, ktorej identifikovaný MimeType bol iný ako text sa nebude analyzovať. Pravdepodobne 
                                        sa jedná o URI s binárnym obsahom, ktorej analýza nemá zmysel. CrawlURI postupuje do reťazca
                                        Post-processing chain.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>3.2 CrawlURI Content type=text</emphasis> - 
                                        CrawlURI, ktorej identifikovaný MimeType bol text bude spracovaná modulom 
                                        WebAnalyzer
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis>4. WebAnalyzer run(curiName, outlinks, contetType, content)</emphasis> - 
                                CrawlURI, ktoré sa dostali do tejto vetvy sú spracované WebAnalyzerom. Ten na základe parametrov
                                o danej CrawlURI identifikuje či sa jedná o bohemikálnu URI alebo nie.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>4.1 CrawlURI NO FLAG</emphasis> - 
                                        CrawlURI, ktorá bola WebAnalyzerom identifikovaná ako nebohemikálna postupuje do
                                        reťaze Post-processing chain. Nenastavuje sa jej žiadny príznak.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>4.2 CrawlURI FLAG=valid_URI, DEPTH=x</emphasis> - 
                                        CrawlURI, identifikovaná ako bohemikálna bude následne archivovaná. Predtým sa jej však nastaví
                                        príznak <emphasis>valid_URI</emphasis> a <emphasis>depth=x</emphasis>. Hodnotu pre hĺbku získa 
                                        WebAnalyzer zo súboru properties, ktorý nastavuje užívateľ pred spustením. Tým zabezpečíme 
                                        aby si systém pamätal, do akej hĺbky má rekurzívne nájdené odkazy automaticky archivovať.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis>5. ARCWriterProcessorWebAnalyzer innerProcess(CrawlURI curi)</emphasis> - 
                                Procesor ARCWriterProcessorWebAnalyzer archivuje každú CrawlURI, ktorá sa mu predá ako parameter s 
                                výnimkou CrawlURI typu DNS.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis>6. LinksScoperWebAnalyzer innerProcess(CrawlURI curi)</emphasis> - 
                                Procesor LinksScoperWebAnalyzer spracuje všetky odkazy nájdené na danej CrawlURI predanej ako parameter.
                                Podľa príznaku CrawlURI sa vytvoria ekvivalentné CandidateURI z odkazov a nastavia sa im príslušné
                                príznaky.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>6.1 CrawlURI NO FLAG</emphasis> - 
                                        CrawlURI, ktorá nemá nastavený žiadny príznak sa spracuje klasickým spôsobom
                                    </para>
                                    <itemizedlist>
                                        <listitem>
                                            <para><emphasis>6.1.2 createCandidateURI()</emphasis> - 
                                                Vytvorí sa objekt CandidateURI.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>6.1.3 CandidateURI NO FLAG</emphasis> - 
                                                CandidateURI, ktorej rodičovská stránka CrawlURI nemá žiadny príznak, taktiež nemá nastavený príznak.
                                                Následne pokračuje klascikým spôsobom v spracovaní režazou Post-processing chain.
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                                <listitem>
                                    <para><emphasis>6.2 CrawlURI FLAG=valid_link, DEPTH=x</emphasis> - 
                                        CrawlURI, ktorá ma nastavený príznak <emphasis>valid_link</emphasis> sa ďalej spracuje podľa toho
                                        aká je hodnota príznaku <emphasis>depth</emphasis>.
                                    </para>
                                    <itemizedlist>
                                        <listitem>
                                            <para><emphasis>6.2.1. createCandidateURI()</emphasis> - 
                                                Vytvorí sa objekt CandidateURI.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>6.2.2 CandidateURI FLAG=valid_link, DEPTH=x-1</emphasis> - 
                                                CrawlURI, ktorej príznak <emphasis>depth=x</emphasis> má hodnotu x > 0. Objektom CandidateURI
                                                vytvoreným z odkazov sa nastaví príznak <emphasis>valid_link</emphasis> a hodnota príznaku
                                                <emphasis>depth</emphasis> bude <emphasis>depth=x-1</emphasis>. Tým sa zabezpečí, že sa 
                                                archivujú validné odkazy do definovanej hĺbky. Po znížení hĺbky na x=0 sa objektom CandidateURI
                                                nastaví príznak <emphasis>archive_bin_link</emphasis>, ktorý zaistí, že sa z týchto odkazov
                                                archivujú len obrázky, css štýly a iné zdroje umiestené na predtým archivovanej stránke.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>6.2.3 CandidateURI FLAG=archive_bin_link</emphasis> - 
                                                CrawlURI, ktorej príznak <emphasis>depth=x</emphasis> má hodnotu x = 0. Objektom CandidateURI
                                                vytvoreným z odkazov sa nastaví príznak <emphasis>archive_bin_link</emphasis>.
                                            </para>
                                        </listitem>                                        
                                    </itemizedlist>
                                </listitem>
                                <listitem>
                                    <para><emphasis>6.3 CrawlURI FLAG=valid_URI, DEPTH=x</emphasis> - 
                                        CrawlURI, ktorá ma nastavený príznak <emphasis>valid_URI</emphasis> sa ďalej spracuje podľa toho
                                        aká je hodnota príznaku <emphasis>depth</emphasis>.
                                    </para>
                                    <itemizedlist>
                                        <listitem>
                                            <para><emphasis>6.3.1. createCandidateURI()</emphasis> - 
                                                Vytvorí sa objekt CandidateURI.
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>6.3.2 CandidateURI FLAG=valid_link, DEPTH=x-1</emphasis> - 
                                                CrawlURI, ktorej príznak <emphasis>depth=x</emphasis> má hodnotu x > 0. Objektom CandidateURI
                                                vytvoreným z odkazov sa nastaví príznak <emphasis>valid_link</emphasis> a hodnota príznaku
                                                <emphasis>depth</emphasis> bude <emphasis>depth=x-1</emphasis>. 
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para><emphasis>6.3.3 CandidateURI FLAG=archive_bin_link</emphasis> - 
                                                CrawlURI, ktorej príznak <emphasis>depth=x</emphasis> má hodnotu x = 0. Objektom CandidateURI
                                                vytvoreným z odkazov sa nastaví príznak <emphasis>archive_bin_link</emphasis>.
                                            </para>
                                        </listitem>                                        
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis>7. Post-processor chain</emphasis> - 
                                Každá CrawlURI musí prejsť touto reťazou procesorov.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis>8. Frontier schedule(CandidateURI caURI)</emphasis> - 
                                Zaradí každú CandidateURI do kolekcie čakajúcich CandidateURI podľa priority.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis>9. Frontier finished(CrawlURI curi)</emphasis> - 
                                Potom ako všetky procesory skončia, ToeThread volá metodu finish(CrawlURI curi) objektu Frontier.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <figure float="1" id="archiveLinks"> 
                        <title>spracovanie crawlURI</title>                    
                        <mediaobject>
                            <imageobject>
                                <imagedata scale="50" fileref="archiveLinks.png" format="PNG"/>
                            </imageobject>
                        </mediaobject>
                    </figure>                    
                </sect3>
            </sect2>
        </sect1>
    </chapter>
    <chapter>
        <title>WebAnalyzer - návrh a implementácia</title>
        <para>
            V kapitole o integrácií modulu WebAnalyzer so systémom Heritrix, 
            sme spomínali, že WebAnalyzer bude klasická knižcnica, ktorá bude
            poskytovať rozhranie, používané v procesore ExtractorWebAnalyzer.
            Zbytok funcionality celého systému na identifikovanie a rozpoznanie
            webu mimo národnej domény je zahrnutý v integračných moduloch.
            Teraz sa zameriame na návrh tried systému WebAnalyzer.
            WebAnalyzer sme navrhli tak, aby mohol byť použitý ako samostatná
            komponenta, ktorá bude identifikovať URI podľa nastavených požiadavkov.
            Súčasťou je súbor webanalyzer.properties, v ktorom môže užívateľ nastaviť
            aké rozhodovacie kritéria sa majú použiť a za akých podmienok sa má
            stránka identidikovať ako validná. todo odkaz dalej.
            WebAnalyzer je navrhnutý tak, aby bolo jednoduché pridať nové
            rozhodovacie krytérium do kódu. Poskytuje rozhrania, ktoré musí
            nové kritérium implementovať. Potom stačí pridať pár riadkov do
            triedy, ktorá získava informácie zo súboru webanalyzer.properties, aby 
            sme mohli konfigurovať nový modul pomocou tohto externého súboru.
        </para>
        <sect1>
            <title>Návrh tried modulu WebAnalyzer</title>
            <para>
                Návrh tried modulu WebAnalyzer je zobrazený na obrázku.
                Triedy sú zabalené do jednotlivých balíkov, ktorých triedy
                vykonávajú podobnú funcionalitu, alebo sú vzájomne tesne spjaté.
            </para>
            <figure float="1" id="webanalyzerCD"> 
                <title>Class Diagram modulu WebAnalyzer</title>                    
                <mediaobject>
                    <imageobject>
                        <imagedata scale="30" fileref="webanalyzerCD.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>    
            <itemizedlist>
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread</emphasis> -
                        Tento balík obsahuje triedy, ktoré sa starajú o načítavanie
                        vlasntostí definovaných v externom súbore a triedu, ktoré poskytuje
                        rozhranie pre prácu s celým systémom.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">WebAnalyzer</emphasis> - 
                                Trieda poskytuje rozhranie pre prácu so systémom. Počas
                                celého procesu je vytorená iba jedna instancia tejto triedy.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">PropertiesReader</emphasis> -
                                Trieda, ktorá načíta a zvaliduje hodnoty parametrov z externého
                                súboru webanalyzer.properties.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">WebAnalyzerProperties</emphasis> - 
                                Trieda, ktorá slúži na uchovanie informácií načítaných z externého
                                súboru. Ostatné triedy majú takto prístup ku všetkým informáciam
                                definovaným užívateľom.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread.analyzer.util</emphasis> -
                        Tento balík obsahuje triedy, ktoré obsahujú často používané funkcie
                        WebAnalyzeru. Okrem toho obsahuje triedu, kde sú definované konštanty
                        pre jednoduchú identifikáciu rozhodovacích kritérií.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">FilterText</emphasis> - 
                                Trieda poskytuje funkcie na prácu s textom.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">PropertiesReader</emphasis> -
                                Trieda, ktorá obsahuje konštanty na lepšiu indetifikáciu
                                rozhodovacích kritérií.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread.analyzer</emphasis> -
                        Tento balík obsahuje triedy, ktoré uchovávajú celý stav
                        procesu a poskytujú hlavný komunikačný kanál pre ostatné triedy.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">UrlAnalyzer</emphasis> - 
                                Trieda, ktorá inicializuje všetky požadované rozhodovacie kritéria a
                                spúšťa analýzu. Okrem toho počíta štatistiky a rozhoduje či je 
                                stránka validná alebo nie.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">PointsCounter</emphasis> -
                                Trieda, ktorá uchováva počet dosiahnutých bodov pre
                                analyzovanú stránku. Pri nájdení hľadanej informácie
                                vyhľadávače zvyšujú počet bodov. Na konci sa porovná
                                dosiahnutý počet bodov s požadovanou minimálnou hranicou a 
                                rozhodne sa či je stránka validná alebo nie.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">ProcessedCrawlURI</emphasis> - 
                                Trieda, ktorá uchováva informácie o spracovávanej URI.
                                Jej názov, typ(MimeType), textový obsah a kolekciu 
                                odkazov nájdených v textovom obsahu.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread.mime</emphasis> -
                        Tento balík obsahuje triedy, ktoré identifikujú MimeType
                        dokumentu.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">Content</emphasis> - 
                                Trieda, ktorá poskytuje rozhranie na volanie tejto 
                                komponenty. Pri vytvorení instancie tohto objektu
                                sa vytvoria ostatné objekty a načítajú zoznam
                                elementov MimeType, ktorý je uložený v externom 
                                xml súbore. Na základe informácií o dokumente sa 
                                indetifikuje jeho MimeType porovnávaním so zoznamom
                                všetkých MimeTypov (napr. podľa koncovky). 
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">MimeType</emphasis> -
                                Trieda, ktorá uchováva informácie o danom MimeType.
                                Názov koncovky, popis, MagicMimeType a iné.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">MimeTypes</emphasis> - 
                                Táto trieda poskytuje úlohu repozitára všetkých MimeType, 
                                prostredníctvom ktorých dokáže identifikovať MimeType
                                dokumentu na základe koncovky alebo magic sekvencie.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">MimeTypesReader</emphasis> - 
                                Trieda jednoducho načíta zoznam MimeType z externého
                                xml súboru a naplní ním objekt MimeTypes.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">MimeTypesException</emphasis> - 
                                Výnimka pri identifkovaní MimeType.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem> 
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread.managers</emphasis> -
                        Tento balík obsahuje triedy, ktoré sú nevyhnutné pre prácu
                        niektorých vyhľadávačov. Inicializujú databázové spojenia, 
                        otvárajú súbory a iné zdroje používané vyhľadávačmi. Musia sa inicializovať
                        pred spustením analýzy a musia poskytovať synchronizované metódy, aby
                        sa dali použiť viacerými vláknami.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">WebAnalyzerManager</emphasis> - 
                                Hlavná trieda, ktorá inicializuje potrebné objekty
                                IManager, tak ako je definované užívateľom. Pri skončení
                                procesu volá metodu close() každého vytvoreného objektu IManager, 
                                aby sa uzavreli všetky otvorené spojenia.
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">IManager</emphasis> -
                                IManager je rozhranie, ktoré musia implementovať 
                                manažéri. Manažér obsahuje metódy požadované rozhraním
                                a synchronizovanú metódu používanú asociovaným vyhľadávačom.
                                (napr. GeoIPSearcher používa GeoIPManager na získanie informácií
                                o danej IP z databáze)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para><emphasis>cz.webarchiv.webanalyzer.multithread.criteria</emphasis> -
                        Tento balík obsahuje triedy, ktoré predstaujú vyhľadávače 
                        na základe konkrétnych kritérií. Všetky vyhľadávače musia
                        implementovať rozhranie ISearcher.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">ISearcher</emphasis> - 
                                Rozhranie ISearcher požaduje metódu search(ProcessedCrawlURI curi), 
                                ktorá vyhľadáva konkrétnu informáciu a metódu toSring(), 
                                ktorá poskytuje štatistiky získané počas spracovania danej
                                ProcessedCrawlURI.
                                Realizácia napr. EmailSearcher, GeoIPSearcher, PhoneSearcher...
                            </para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">IManager</emphasis> -
                                IManager je rozhranie, ktoré musia implementovať 
                                manažéri. Manažér obsahuje metódy požadované rozhraním
                                a synchronizovanú metódu používanú asociovaným vyhľadávačom.
                                (napr. GeoIPSearcher používa GeoIPManager na získanie informácií
                                o danej IP z databáze)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </sect1>
        <sect1>
            <title>Workflow modulu WebAnalyzer</title>
            <para>
                Pracovný postup identifikovania URI adresy sme rozdelili na 4 časti.
                Každá časť predstavuje jednu metódu volanú zo systému Heritrix
                (konkrétne náš modul ExtractorWebAnalyzer).
            </para>
            <sect2>
                <title>inicializácia</title>
                <para>
                    WebAnalyzer sa musí pred použitím nainicializovať. Inicializácia
                    WebaAnalyzeru sa uskutočňuje zároveň s inicializáciu prosesoru
                    ExtractorWebAnalyzer, ktorý je súčasťou Heritrixu. Postup
                    inicializovania:
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">1.initialize()</emphasis> - 
                        Systém Heritrix volá prostredníctvom procesoru ExtractorWebAnalyzer, 
                        metódu inicialize() modulu WebAnalyzer. Jediná instancia WebAnalyzeru
                        existuje po celú dobu spracovania úlohy Heritrixu.
                        </para>
                    </listitem> 
                    <listitem>
                        <para><emphasis role="bold">2.create PropertiesReader</emphasis> - 
                        Pri inicializácií je nutné načítať nastavené vlastnosti v 
                        externom súbore webanalyzer.properties, ktoré definujú
                        požiadavky na idetifikáciu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">3. loadPropertiesReader</emphasis> - 
                        Metóda načíta hodnoty pre konkrétne vlastnosti a zvaliduje
                        ich. Ak je hodnota nevalidná, tak systém vyhodí výnimku.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">4. create WebAnalyzerProperties</emphasis> - 
                        PropertiesReader vytvorí objekt WebAnalyzerProperties a naplní
                        mu všetky hodnoty jednotlivých vlastností. WebAnalyzerProperties
                        bude uchovávať tieto informácie, aby k nim mohli 
                        ostatné triedy pristupovať.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">5. create WebAnalyzerManager</emphasis> - 
                        Vytvára sa objekt WebAnalyzerManager, ktorý spravuje ostatných
                        potrebných manažérov .
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">6. initializeManagers()</emphasis> - 
                        Metóda bude inicializovať potrebných manažérov.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">7. getSearchersToUse()</emphasis> - 
                        WebAnalyzerManager potrebuje zistiť, ktorých manažérov
                        má vytvoriť.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">8. return searchers</emphasis> - 
                        WebAnalyzerProperties vráti zoznam vyhľadávačov, ktoré požadoval 
                        uživateľ pri konfigurácií. Na základe vyhľadávačov WebAnalyzerManager
                        spozná, ktorých manažérov má vytvoriť.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">9. create IManager</emphasis> - 
                        Vytvárajú sa manažéri. Každý manažér bude predstavovať práve
                        jednu instanciu, ktorá sa bude používať viacerými vláknami.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">10. init()</emphasis> - 
                        Každý manažér sa musí inicializovať, aby otvoril potrebné spojenia
                        do databáze, súboru alebo iných zdrojov.
                        </para>
                    </listitem>
                </itemizedlist>
                <figure float="1" id="sd1"> 
                    <title>seq</title>                    
                    <mediaobject>
                        <imageobject>
                            <imagedata scale="20" fileref="SD1.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </figure>    
            </sect2>
            <sect2>
                <title>identifikácia MimeType dokumentu</title>
                <para>
                    Pred samotnou analýzou dokumentu je nutné overiť jeho typ.
                    Analýza textu nemá pri binárnych súboroch a iných aplikácií
                    význam. Preto ak chceme analyzovať webové stránky, musíme sa ubezpečiť, 
                    že budú analyzované dokumenty s príslušným MimeType. Užívateľ však 
                    môže chcieť identifikovať stránky iba podľa IP adresy alebo názvu URL
                    adresy. V tomto prípade by mal WebAnalyzer nakonfigurovať tak, 
                    aby používal iba príslušné kritéria pri identifikácií. Moduly
                    na vyhľadávanie e-mailov, telefónych čísel alebo slov v slovníku
                    by mali byť vypnuté.
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">1. isContentTypeText()</emphasis> -
                        Heritrix volá metódu isContentTypeText(), ktorá spúšťa identifikáciu
                        MimeType danej URI adresy.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">2. create Content</emphasis> -
                        WebAnalyzer vytvára objekt Content, ktorý nainicializuje
                        potrebné objekty a poskytuje metódu na identifikovanie
                        MimeType. Instancia objektu Content sa vytvára pri každom
                        volaní metódy isContentTypeText(). Každé vlákno vlastní svoju
                        instanciu tohto objektu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">3. init()</emphasis> -
                        Metóda init() inicializuje ostatné potrebné objekty. Objekty
                        MimeTypes a MimeTypesReader sú finálne, ich instancia sa vytvára
                        len raz, pri prvom volaní tejto komponenty.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">4. addMimeTypes()</emphasis> -
                        Finálny objekt MimeTypes volá túto metódu, aby naplnil
                        svoju kolekciu všetkých MimeType, ktoré sa neskôr použijú
                        pri vyhľadávaní MimeType neznámeho dokumentu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">5. readAllMimeTypes()</emphasis> -
                        Metóda vytvára spojenie s externým XML súborom a číta z neho
                        jednotlivé elementy MimeType.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">6. create MimeType</emphasis> -
                        Z každého elementu MimeType zapísaného v XML dokumente sa 
                        vytvorí odpovedajúci objet MimeType a pridá sa do kolecie všetkých
                        MimeType záznamov.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">7. return MimeTypes</emphasis> -
                            Naplní sa kolekcia MimeType záznamov v objekte MimeTypes.
                            Tým sa dokončí potrebná inicializácia, ktorá sa už viac
                            krát nebude opakovať. Pri ostatných volaniach sa zavolá priamo
                            metóda getContentType().
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">8. getContentType</emphasis> -
                        Metóda, ktorá hľadá MimeType skúmaného dokumentu.                        
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">9. getMimeTypes()</emphasis> -
                        Podľa informácií získaných zo skúmaného dokumentu sa hľadajú
                        odpovedajúce MimeType.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">10. getMimeTypes</emphasis> -
                        Objekt sa snaží zistiť MimeType skúmaného dokumentu podľa
                        názvu URI alebo bytov reprezentujúcich skúmaný dokument 
                        (zisťovanie magic Mime).
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">11. return mimeTypes</emphasis> -
                        Vráti sa zoznam možných odpovedajúcich MimeType.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">12. return MimeType</emphasis> -
                        Zo zoznamu odpvedajúcich MimeType sa jeden vyberie a ten sa vráti
                        ako identifikovaný MimeType.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">13. return true if text</emphasis> -
                        WebAnalyzer vráti systému Heritrix logickú hodnotu true, iba ak
                        je identifikovaný MimeType typu text.
                        </para>
                    </listitem>
                </itemizedlist>
                <figure float="1" id="sd2"> 
                    <title>seq</title>                    
                    <mediaobject>
                        <imageobject>
                            <imagedata scale="20" fileref="SD2.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </figure> 
            </sect2>
            <sect2>
                <title>analýza</title>
                <para>
                    Po nainicializovaní modulu WebAnalyzer môžeme začať používať jeho
                    metódu na analyzovanie.
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">1. run()</emphasis> - 
                        Heritrix volá metódu run(), ktorá spúšťa analýzu.
                        Metóde run sú predané parametre, ktoré predstavujú informácie
                        získané už z Heritrixu. Medzi významné patría názov URI, ktorá sa analyzuje, 
                        jej textový obsah a množina odkazov obajvených na tejto URI.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">2. create UrlAnalyzer</emphasis> - 
                        Pri každom volaní metódy run() sa vytvorí nová instancia
                        objektu UrlAnalyzer, ktorý si pamätá stav pri spracovaní
                        konkrétnej URI. Tým dosiahneme, že sa bude uskutočňovať
                        analýza paralelne vo viacerých vláknach. Samotný Heritrix
                        pri východiskovom nastavení spúšťa 50 vláken, ktoré potom môžu
                        súčasne používať modul WebAnalyzer. Bolo by neoptimálne čakať
                        kým jedno vlákno skončí časovo náročnú analýzu a potom predá 
                        riadenie druhému vláknu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">3. create PointsCounter</emphasis> - 
                        Pre každú instanciu UrlAnalyzer sa vytvorí instancia PointsCounter, ktorá
                        si pamätá počet nazbieraných bodov pre analyzovanú URI.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">4. getSearchersToUse()</emphasis> - 
                        Z už vytvoreného objektu WebAnalyzerProperties si získame zoznam
                        vyhľadávačov, ktoré sa majú pri analýze použiť.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">5. return searcherToUse</emphasis> - 
                        Vráti zoznam vyhľadávačov, definovaných užívateľom.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">6. create ISearcher</emphasis> - 
                        Pre každý záznam zo zoznamu vyhľadávačov sa vytvorí odvedajúci objekt.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">7. setPointsCounter()</emphasis> - 
                        Každá instancia vyhľadávača si priradí už vytvorený objekt
                        PointsCounter, ktorý bude používať.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">8. getProperties()</emphasis> - 
                        Každý vyhľadávač pri nájdení hľadanej informácie pripočíta alebo
                        odpočíta počet bodov analyzovanej stránke. Počet bodov, s ktorými
                        vyhľadávač pracuje je definovaná taktiež v externom súbore a 
                        prístupná cez WebAnalyzerProperties.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">9. return props</emphasis> - 
                        WebAnalyzerProperties vráti hodntoty vlastností, ktoré používa
                        konkrétny vyhľadávač.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">10. setIManager()</emphasis> - 
                        Niektoré vyhľadávače pristupujú k databázam alebo externým
                        súborom, a preto používajú manažerov, ktoré poskytujú synchronizované 
                        metody volané odpovedajúcim vyhľadávačom. Pri vytvorení si 
                        musí každý vyhľadávač asociovať svoj už vytvorený manažér.
                        Tým sa končí nastavenie vhľadávačov a môžu sa použiť pri analýze.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">11. analyze()</emphasis> - 
                        Metóda analyze() už má pripravené všetky podklady pre 
                        spustenie analýzy, tak aby sa použili tie vyhľadávače, ktoré
                        boli nadefinované.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">12. create ProcessedCrawlURI</emphasis> - 
                        Pri analýze URI sa vytvorí objet ProcessedCrawlURI, ktorý
                        zabaľuje informácie o URI predané z Heritrixu (názov, typ, obsah, odkazy).
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">13. return curi</emphasis> - 
                        Vytvorená instancia sa vráti objektu UrlAnalyzer, aby ju mohol 
                        použiť ako parameter pre každý vyhľadávač.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">14. search(curi)</emphasis> - 
                        V cykle sa spustí každý vyhľadávač jeho metódou 
                        search(ProcessedCrawlURI curi). Každý vyhľadávač pracuje 
                        nad konkrétnými atribútmi objektu ProcessedCrawlURI.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">15. uses IManager</emphasis> - 
                        Pri vyhľadávaní používajú niektoré vyhľadávače svojich manažérov.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">16. increment()</emphasis> - 
                        Pri nájdení hľadanej informácie sa inkrementuje počet bodov
                        objektu PointsCounter. PointsCounter poskytuje synchronizované
                        metódy, aby bol zachovaný konzistentý stav v multivláknovom prostredí.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">17. getStatistics(curi)</emphasis> - 
                        Po spracovaní skúmanej URI všetkými vyhľadávačmi
                        WebAnalyzer vypíše štatistiky získané vyhľadávačmi. Vypisovanie
                        je nastavené do viacerých log súborov.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">18. isValid()</emphasis> - 
                        Na základe analýzy sa vyhodnotí či je stránka validná alebo nie.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">19. getPoints()</emphasis> - 
                        UrlAnalyzer požaduje počet dosiahnutých bodov z objektu PointsCounter.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">20. return points</emphasis> - 
                        Vráti sa počet dosiahnutých bodov, ktoré sa použijú na výsledné vyhodnotenie
                        spracovávanej URI.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">21. valid = (ponints >= minPointsToValid)</emphasis> - 
                        Vyhodnotenie validity funguje na základe porovnania získaných bodov a 
                        predstavujúich hranicu, ktorú treba prekonať aby bola stránka identifikovaná ako
                        validná. Táto hranica je definovaná užívateľom v externom súbore.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">22. return valid</emphasis> - 
                        UrlAnalyzer vracia logickú hodnotu.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">23. return valid</emphasis> - 
                        WebAnalyzer predáva Heritrixu informáciu, či je analyzovaná
                        URI identifikovaná ako validná alebo nie.
                        </para>
                    </listitem>
                </itemizedlist>
                <figure float="1" id="sd3"> 
                    <title>seq</title>                    
                    <mediaobject>
                        <imageobject>
                            <imagedata scale="20" fileref="SD3.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </figure> 
            </sect2>
            <sect2>
                <title>uzavrenie</title>
                <para>
                    Keď skončí úloha v Heritrixe, tak sa následne zatvárajú
                    všetky procesory, ktoré boli použité. Preto sme v integračnom 
                    procesore ExtractorWebAnalyzer pri jeho finalizovaní zavolali
                    metódu na finalizáciu modulu WebAnalyzer. Tým zabezpečíme, že
                    sa WebAnalyzer správne ukončí, aby nevznikali zbytočné problémy
                    v spojení s Heritrixom.
                </para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">1. close()</emphasis> -
                        Heritrix volá metódu close() objektu WebAnalyzer, ktorá
                        ukončí všetky spojenia a iné relácie.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">2. closeManagers()</emphasis> -
                        Zatvoria sa spojenia s DB, súbormi a inými zdrojmi používanými
                        manažérmi.
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">3. close()</emphasis> -
                        Každý manažér volá svoju metódu close().
                        </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">4. clearProperties()</emphasis> -
                        Nakoniec sa vymažú nastavenia definované v objekte WebAnalyzerProperties.
                        </para>
                    </listitem>
                </itemizedlist>
                <figure float="1" id="sd4"> 
                    <title>seq</title>                    
                    <mediaobject>
                        <imageobject>
                            <imagedata scale="20" fileref="SD4.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </figure> 
            </sect2>
        </sect1>
    </chapter>
    
    <chapter>
        <title>VoiceXML</title>
        <para>VoiceXML je značkovací jazyk určený na popis interaktívnych dialógov
            medzi človekom a počítačom založený na značkovacom jazyku XML. Jeho vývoj
            začal v marci 1999, keď spoločnosti AT&amp;T, IBM, Motorola a Lucent
            Technologies spoločne založili organizáciu <indexterm>
                <primary>VoiceXML Forum</primary>
            </indexterm>VoiceXML Forum. V septembri toho istého roku VoiceXML Forum
            vydalo predverziu 0.9. Finálna verzia štandardu VoiceXML 1.0 uzrela svetlo
            sveta v marci roku 2000. VoiceXML Forum potom predalo správu štandardu do
            rúk konzorcia W3C. VoiceXML Forum týmto ale nezaniklo a naďalej podporuje
            štandard VoiceXML a vykonáva testy kompatibility implementácií VoiceXML
        platforiem so štandardom <citation>03</citation>.</para>
        <para>Konzorcium W3C vydalo v marci 2004 finálnu verziu štandardu VoiceXML
            2.0. Po získaní spätných väzieb od partnerov vydalo konzorcium W3C
            rozšírenie predchádzajúceho štandardu – VoiceXML 2.1. Toto rozšírenie
            dopĺňa a modifikuje niekoľko elementov a atribútov z predchádzajúceho
            štandardu. Pri tom zachováva spätnú kompatibilitu so štandardom VoiceXML
        2.0.</para>
        <sect1>
            <title>Architektúra VoiceXML</title>
            <para>Architektúra VoiceXML je veľmi podobá architektúre jazyka HTML
                (Hyper-text markup language) – aplikácia VoiceXML je kolekcia súborov
                VoiceXML, ktoré sú vzájomne prepojené a odkazujú na seba. Ako sa na
                prehliadanie HTML stránok používajú webové prehliadače, tak sa na
                čítanie VoiceXML dokumentov používajú <indexterm>
                    <primary>interpreter VoiceXML</primary>
            </indexterm>interpretery VoiceXML <citation>04</citation>.</para>
            <para>Vývojári aplikácií VoiceXML majú prácu, podobne ako vývojári
                pracujúci s jazykom HTML, ľahšiu o to, že nemusia brať do úvahy
                programové vybavenie a operačný systém, na ktorom má byť aplikácia
                VoiceXML nakoniec prevádzkovaná. Táto vlastnosť im značne uľahčuje
            prácu.</para>
            <para>Architektúra nasadenia aplikácie VoiceXML pozostáva
                z <emphasis>aplikačného servera</emphasis>, <emphasis>telefónneho
                servera</emphasis>, <emphasis>servera VoiceXML</emphasis> a
                <emphasis>databázy</emphasis> alebo <emphasis>transakčného
                servera</emphasis>. Niektoré z týchto môžu byť vynechané. Klienti
                <emphasis>telefónneho servera</emphasis> sú pripojení pomocou telefónnej
                siete. Prepojenie serverov je realizované pomocou siete TCP/IP. Ako
                prenosový protokol pri pripojení TCP/IP sa používa protokol HTTP
            (Hyper-text transfer protocol) <citation>05</citation>.</para>
            <para><emphasis>Aplikačný server</emphasis> riadi základnú aplikačnú
                logiku a prístup k <emphasis>databázam</emphasis> alebo
                <emphasis>transakčnému serveru</emphasis>. <emphasis>Server
                VoiceXML</emphasis> obsahuje <indexterm>
                    <primary>interpreter VoiceXML</primary>
                </indexterm> <emphasis>interpreter VoiceXML</emphasis>, ktorý má
                priamy dosah na dialógy VoiceXML a ďalšie systémové zdroje, ako sú
                napríklad <emphasis>rozoznávač reči</emphasis> a <emphasis>syntetizátor
                reči</emphasis>. <emphasis>Interpreter VoiceXML</emphasis> je v pozícii
                klienta <emphasis>aplikačného servera</emphasis>. Dokumenty aplikácie
                VoiceXML môžu byť statické, alebo dynamicky generované
            <emphasis>aplikačným serverom</emphasis>.</para>
            <figure>
                <title>Architektúra nasadenia aplikácie VoiceXML</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="crawler_overview1.png" />
                    </imageobject>
                </mediaobject>
            </figure>
            <para>VoiceXML je značkovací jazyk založený na XML. V kombinácii
                s webovou technológiou a nástrojmi predstavuje silný nástroj na tvorbu
            hlasových aplikácií a dialógových systémov.</para>
        </sect1>
        <sect1>
            <title>Sémantika jazyka VoiceXML</title>
            <para>Jazyk VoiceXML je značkovací jazyk založený na špecifikácii jazyka
                XML. Aj preto je zaistená dobrá strojová spracovateľnosť a
            zrozumiteľnosť pre človeka.</para>
            <para>Medzi ovládacie elementy jazyka VoiceXML patria elementy <sgmltag
                    class="element">&lt;menu&gt;</sgmltag> a <sgmltag
                    class="element">&lt;form&gt;</sgmltag>. Element <sgmltag
                    class="element">&lt;menu&gt;</sgmltag> reprezentuje ponuku a skladá sa z
                elementov <sgmltag class="element">&lt;choice&gt;</sgmltag>
                reprezentujúcich jednotlivé položky ponuky. Hlasový výstup zabezpečujú
                elementy <sgmltag class="element">&lt;prompt&gt;</sgmltag>, buď
                prehraním zvukovej nahrávky (element <sgmltag
                    class="element">&lt;audio&gt;</sgmltag>) alebo pomocou syntézy reči.
                Používateľský vstup je spracovaný nahrávaním, rozoznávaním reči alebo
                rozoznávaním tónov <indexterm>
                    <primary>DTMF</primary>
                </indexterm>DTMF (reprezentované atribútmi <sgmltag
                    class="attribute">dtmf</sgmltag>, ktorým je priradzovaná číselná hodnota
                klávesy). VoiceXML tiež sčasti zabezpečuje ovládanie smerovania hovoru.
                Používa na to vyhodnocovanie podmienok <sgmltag
                    class="element">&lt;if&gt;</sgmltag>, <sgmltag>&lt;elseif&gt;</sgmltag>
                a <sgmltag class="element">&lt;else&gt;</sgmltag>, skriptovací jazyk
                <indexterm>
                    <primary>ECMAScript</primary>
                </indexterm>ECMAScript (<sgmltag
                    class="element">&lt;script&gt;</sgmltag>) a komunikáciu so serverom
                (<sgmltag class="element">&lt;submit&gt;</sgmltag>)
            <citation>06</citation> <citation>07</citation>.</para>
            <para>VoiceXML obsahuje aj nástroje na spracovanie niektorých
                problémových stavov. Prípad, že používateľ nezadá žiadnu voľbu ošetruje
                element <sgmltag class="element">&lt;noinput&gt;</sgmltag>. Ošetrenie
                nesprávneho vstupu používateľa zabezpečuje element <sgmltag
                    class="element">&lt;nomatch&gt;</sgmltag>. Po žiadosti používateľa
                o pomoc je vykonaná akcia uvedená v elemente <sgmltag
                    class="element">&lt;help&gt;</sgmltag>. VoiceXML ponúka možnosť správy
                výnimiek, na čo slúžia elementy <sgmltag
                    class="element">&lt;throw&gt;</sgmltag> a <sgmltag
                class="element">&lt;catch&gt;</sgmltag>.</para>
        </sect1>
    </chapter>
    <chapter>
        <title>Súvisiace technológie</title>
        <para>S problematikou hlasových aplikácií a dialógových systémov súvisí
            viacero rôznych technológií a štandardov, z ktorých je väčšina pod správou
            konzorcia W3C. Niektoré z nich zabezpečujú ovládanie spracovania súborov a
            hovorov. Iné súvisia so spracovaním reči – s jej rozoznávaním a syntézou.
        Preto sú predstavené v dvoch podkapitolách.</para>
        <sect1>
            <title>Technológie ovládania spracovania</title>
            <para>Technológie ovládania spracovania sú určené na synchronizáciu
                jednotlivých prvkov použitých v nasadení danej aplikácie alebo
            dialógového systému.</para>
            <indexterm>
                <primary>CCXML</primary>
            </indexterm>
            <para><emphasis role="bold">CCXML</emphasis> (Call Control XML) je
                značkovací jazyk, ktorý vyvinulo konzorcium W3C na správu telefónie
                platformy VoiceXML. Integruje sa s <indexterm>
                    <primary>interpreter VoiceXML</primary>
                </indexterm>interpreterom VoiceXML a zabezpečuje správu, ovládanie
                a prevody telefonátov prostredníctvom sieťovej vrstvy
            <citation>08</citation>.</para>
            <para>Na rozdiel od VoiceXML je jeho úlohou informovať interpreter
                VoiceXML o tom, ako má spracovať informácie o ovládaní hovoru
                z hlasového kanálu. Call Control XML je možné použiť aj mimo prostredia
                aplikácií VoiceXML. Často sa integruje v systémoch interaktívnej
                hlasovej odozvy <indexterm>
                    <primary>IVR</primary>
                </indexterm>IVR (Interactive Voice Response) a zabezpečuje ovládanie
            prepájania hovorov.</para>
            <indexterm>
                <primary>SCXML</primary>
            </indexterm>
            <para><emphasis role="bold">SCXML</emphasis> (State Chart XML) je
                značkovací jazyk založený na <indexterm>
                    <primary>CCXML</primary>
                </indexterm>CCXML a Harelových diagramoch – matematickom modele stavov
                procesov. Popisuje stavy systému a prechody medzi nimi podobnou formou,
            ako diagramy UML <citation>09</citation>.</para>
            <para>V kontexte aplikácií VoiceXML je nástupcom <indexterm>
                    <primary>CCXML</primary>
                </indexterm>CCXML a používa sa na navigáciu hovorov medzi rôznymi
            dokumentami a logickými časťami aplikácií VoiceXML.</para>
            <indexterm>
                <primary>ECMAScript</primary>
            </indexterm>
            <para>Programovací jazyk <emphasis role="bold">ECMAScript</emphasis> je
                multiparadigmatický jazyk ovplyvnený jazykmi <indexterm>
                    <primary>Java</primary>
                </indexterm>Java, <indexterm>
                    <primary>Perl</primary>
                </indexterm>Perl, <indexterm>
                    <primary>Python</primary>
                </indexterm>Python a <indexterm>
                    <primary>Hypertalka</primary>
                </indexterm>Hypertalk. Svetlo sveta uzrel v roku 1997. Podľa jednej
                z prvých implementácií jeho špecifikácie je často označovaný ako
                JavaScript. V roku 1998 bola vydaná druhá verzia zabezpečujúca
                kompatibilitu s normou ISO/IEC 16262. O rok neskôr bol jazyk ECMAScript
                rozšírený o podporu regulárnych výrazov, zachytávanie výnimiek a boli
                vylepšené niektoré už existujúce časti a vlastnosti. Na štvrtej verzii
                sa v súčasnej dobe pracuje. ECMAScript sa v dialógových systémoch
                využíva hlavne na vyhodnocovanie výrazov a gramatík
            <citation>10</citation>.</para>
            <para>Na prepojenie s dokumentami XML sa používa rozšírenie jazyka
                <indexterm>
                    <primary>E4X</primary>
                </indexterm>E4X (<indexterm>
                    <primary>ECMAScript for XML</primary>
                </indexterm>ECMAScript for XML). Bežne sa pri spracovaní dokumentov
                XML používa prístup, pri ktorom sa dokument XML prevedie do modelu DOM
                (Document Object Model). Rozšírenie <indexterm>
                    <primary>ECMAScript for XML</primary>
                </indexterm>ECMAScript for XML nepoužíva toto riešenie ale primitívny
                prístup urýchľujúci tvorbu programu a prácu s dokumentmi XML. Jazyk
                <indexterm>
                    <primary>ECMAScript</primary>
                </indexterm>ECMAScript je implementovaný napríklad v jadre Gecko,
                základe pre Mozillu Firefox, a jazyku ActionScript, súčasti Flash 9, od
            spoločnosti Adobe <citation>11</citation>.</para>
        </sect1>
        <sect1>
            <title>Technológie spracovania reči</title>
            <para>Medzi technológie spracovania reči patrí niekoľko jazykov
                popisujúcich spôsob spracovania a formu dát. Tieto sú využívané pri
            samotnom spracovaní reči pri jej rozoznávaní a syntéze.</para>
            <indexterm>
                <primary>SSML</primary>
            </indexterm>
            <para><emphasis role="bold">SSML</emphasis> (Speech Synthesis Markup
                Language) popisuje spôsob a parametre syntézy reči, ako napríklad druh
                použitého syntetizátora, rýchlosť, tón a klesanie hlasu
            <citation>12</citation>.</para>
            <indexterm>
                <primary>SRGS</primary>
            </indexterm>
            <para><emphasis role="bold">SRGS</emphasis> (Speech Recognition Grammar
                Specification) udáva rozoznávaču reči, aké reťazce sú prípustné pre daný
                jazyk. Na popis prípustných reťazcov používa gramatiky. Úzko súvisí
                s technológiou <indexterm>
                    <primary>SISR</primary>
            </indexterm>SISR <citation>13</citation>.</para>
            <indexterm>
                <primary>SISR</primary>
            </indexterm>
            <para><emphasis role="bold">SISR</emphasis> (Semantic Interpretation for
                Speech Recognition) extrahuje sémantický význam z údajov získaných
                pomocou rozoznávania reči. Úzko súvisí so <indexterm>
                    <primary>SRGS</primary>
                </indexterm>SRGS. V praxi sa využíva v kombinácii s programovacím
                jazykom <indexterm>
                    <primary>ECMAScript</primary>
            </indexterm>ECMAScript <citation>14</citation>.</para>
            <indexterm>
                <primary>PLS</primary>
            </indexterm>
            <para><emphasis role="bold">PLS</emphasis> (Pronunciation Lexicon
                Specification) je špecifikácia konzorcia W3C, ktorá definuje výslovnosť
                slov pre rozoznávače a syntetizátory reči. Povoľuje špecifikovanie
                viacerých výslovností daného slova alebo frázy, čo je nevyhnutné kvôli
                rozdielom vo výslovnosti slova pri jeho rôznej pozícii vo vete.
                Definície výslovnosti zhromaždené v jednom dokumente sú prístupné na
                využitie syntetizátorom a rozoznávačom reči
            <citation>15</citation>.</para>
            <para><emphasis role="bold">Syntéza reči</emphasis> je umelé vytváranie
                zvukov ľudskej reči. Túto činnosť vykonáva syntetizátor reči, ktorý môže
                byť implementovaný buď v programovom alebo technickom vybavení. Využíva
                jazyk <indexterm>
                    <primary>SSML</primary>
            </indexterm>SSML <citation>16</citation>.</para>
            <para><emphasis role="bold">Prevod textu na reč</emphasis> vykonávajú
                systémy <indexterm>
                    <primary>TTS</primary>
                </indexterm>TTS (Text to Speech). Syntetizátory reči sú ich
            súčasťou.</para>
            <para><emphasis role="bold">Rozoznávanie reči</emphasis> je proces, pri
                ktorom sa spracovaním zvukového vstupu získava rad slov. Tento proces
                zabezpečuje program – rozoznávač reči. Proces rozoznávania reči využíva
                technológie <indexterm>
                    <primary>SRGS</primary>
                </indexterm>SRGS, <indexterm>
                    <primary>SISR</primary>
                </indexterm>SISR a <indexterm>
                    <primary>PLS</primary>
            </indexterm>PLS <citation>17</citation>.</para>
        </sect1>
    </chapter>
    <chapter>
        <title>Vybrané interpretery VoiceXML</title>
        <para>Vyhľadávaním na Internete je možné nájsť niekoľko desiatok
            interpreterov VoiceXML. Väčšina z nich je proprietárna bez možnosti
            odskúšania. V tejto práci sú priblížené štyri riešenia <indexterm>
                <primary>interpreter VoiceXML</primary>
            </indexterm>interpreterov VoiceXML. Tvoria rôzne kombinácie licencií,
            dostupnosti zdrojových kódov, podporovaných operačných systémov a
            podporovaných vstupov a výstupov. Taktiež sa rôznia možnosti ich
        optimálneho použitia.</para>
        <para>Táto kapitola najprv po jednom predstaví jednotlivé programy a potom
            zhrnie a porovná ich vlastnosti. Pri každom programe opíše jeho vlastnosti
            a funkcie. Medzi nimi nebudú chýbať licencie, podporované operačné
            systémy, podporované vstupy a výstupy a podporovaná verzia štandardu
        VoiceXML.</para>
        <sect1>
            <title>Voxeo Prophecy</title>
            <para>Platforma Voxeo Prophecy je základ pre aplikácie <indexterm>
                    <primary>IVR</primary>
                </indexterm>interaktívnej hlasovej odozvy (IVR) a <indexterm>
                    <primary>VoIP</primary>
                </indexterm>VoIP. Základná funkčnosť platformy je zabezpečená pomocou
                aplikácií VoiceXML za podpory <indexterm>
                    <primary>CCXML</primary>
                </indexterm>CCXML zodpovedného za riadenie telefonátov
            <citation>18</citation>.</para>
            <para>Integruje sa s verejnou telefónnou sieťou a webovými službami.
                Podporuje tónovú voľbu, rozoznávanie reči, integráciu počítačovej
                telefónie, správu a nahrávanie hovorov, konferenčné hovory a komunikáciu
                pomocou <indexterm>
                    <primary>ISDN</primary>
                </indexterm>ISDN, <indexterm>
                    <primary>SIP</primary>
            </indexterm>SIP a VoIP.</para>
            <para>Prophecy podporuje skripty <indexterm>
                    <primary>CGI</primary>
                </indexterm>CGI a širokú škálu jazykov, medzi ktorými nechýbajú
                <indexterm>
                    <primary>Java</primary>
                </indexterm>Java, <indexterm>
                    <primary>Perl</primary>
                </indexterm>PERL a <indexterm>
                    <primary>Python</primary>
            </indexterm>Python. Má zabudovaný server JBoss.</para>
            <para>Voxeo Prophecy je zdarma s podporou dvoch portov (a teda aj
                súbežných hovorov). V prípade podpory štyroch súbežných hovorov je
                potrebné zaplatiť 249 dolárov. Ceny pre použitie vo väčšom meradle
                výrobca na svojich stránkach neuvádza, odkazuje zákazníkov na jednanie
                s obchodným oddelením. Pri registrácii vyžadovanej pre beh Voxeo
                Prophecy je možné zaregistrovať si ďalšie porty s tým, že každý ďalší
                nad štyri je za 779 dolárov. Takýmto spôsobom je možné registrovať až 20
                portov. Cena bude v takomto prípade 12 713 dolárov. Bez registrácie sa
                nespustia Voxeo Prophecy Server a Voxeo Prophecy VoiceXML Browser, čím
            je aplikácia prakticky nepoužiteľná.</para>
            <para>Platforma Voxeo Prophecy je distribuovaná ako inštalačný balíček
                služby Windows Installer (súborová prípona <emphasis>msi</emphasis>).
                Distribuuje sa v troch verziách – bez syntetizátora zvuku <indexterm>
                    <primary>TTS</primary>
                </indexterm>(No TTS), so syntetizátorom zvuku bežnej kvality (Good
                TTS) a s vysokokvalitným syntetizátorom zvuku <indexterm>
                    <primary>TTS</primary>
                </indexterm>(Best TTS). Všetky tri verzie obsahujú platformu
            a rozoznávač reči Voxeo.</para>
            <para>Voxeo Prophecy obsahuje päť serverov, ktoré je možné zaregistrovať
            medzi služby spúšťajúce sa pri štarte systému. Sú to tieto:</para>
            <itemizedlist>
                <listitem>
                    <para>Voxeo Prophecy Server zahŕňa server, ktorý spracúva riadiace
                        informácie v <indexterm>
                            <primary>CCXML</primary>
                        </indexterm>CCXML a server <indexterm>
                            <primary>MRCP</primary>
                        </indexterm>MRCP (Media Resource Control Protocol, Protokol
                    ovládania zdrojov média).</para>
                </listitem>
                <listitem>
                    <para><indexterm>
                            <primary>interpreter VoiceXML</primary>
                        </indexterm>Interpreter VoiceXML Voxeo Prophecy VoiceXML Browser
                        zodpovedndý za spracovanie aplikácií VoiceXML. Plne podporuje
                    štandard VoiceXML 2.1.</para>
                </listitem>
                <listitem>
                    <para>Správcovská konzola Voxeo Prophecy Management Console
                    integruje webový server s podporou PHP.</para>
                </listitem>
                <listitem>
                    <para>Aplikačný server Voxeo Prophecy Application Sever integruje
                    webový server s podporou Java servletov a JSP</para>
                </listitem>
                <listitem>
                    <para>Od verzie 8 je súčasťou distribúcie aj Voxeo Prophecy
                        Designer. Skladá sa zo serveru Designer server a vizuálneho
                        vývojárskeho rozhrania, ktoré je spustený lokálnom porte
                    9992.</para>
                    <para>Vývoj aplikácií v dizajnéri je veľmi intuitívny. Za behu je
                        generovaná aj mapa aplikácie. Vytvorená aplikácia nemôže byť
                        exportovaná vo formáte VoiceXML. Pri prehľadávaní adresárov
                        dizajnéra je možné nájsť aplikáciu zaznamenanú v dokumente XML. Pred
                        nasadením by ju bolo potrebné previesť do VoiceXML. Prístup k nej sa
                        zabezpečuje presmerovaním linky na Voxeo Designer Server. Voxeo
                    Prophecy Designer je zatiaľ len vo verzii Beta.</para>
                </listitem>
            </itemizedlist>
            <para>Distribúcia obsahuje aj <indexterm>
                    <primary>SIP</primary>
                </indexterm>telefón SIP s grafickým používateľským rozhraním, ktorý je
                predvolene nakonfigurovaný na spojenie so serverom Voxeo
            Prophecy.</para>
            <para>Užívateľské rozhranie je tvorené ikonou v oznamovacej oblasti,
                pomocou ktorej je možné spúšťať, reštartovať a zastavovať servery,
                pristupovať k telefónu <indexterm>
                    <primary>SIP</primary>
                </indexterm>SIP, prehliadaču záznamov (Log Viewer) a otvoriť webové
            rozhranie zabezpečované serverom.</para>
            <para>Webové rozhranie obsahuje okrem administratívnej časti aj
                začiatočníckeho sprievodcu (Quick start guide), odkaz na dokumentáciu,
            podporu, registráciu a zoznam známych problémov (Known Issues).</para>
            <para>Dokumentácia k programu je online. Jednoduchý prístup k nej
                zabezpečujú odkazy na domovskej webovej stránke bežiaceho servera Voxeo
                Prophecy Server. Krátky sprievodca k aplikácii Voxeo Prophecy Designer
                sa dá stiahnuť z lokálneho webového servera vo formáte PDF. Spoločnosť
                Voxeo tiež prevádzkuje doménu vxml.org. Nachádza sa tam kompletný
            tréningový kurz jazyka VoiceXML a jeho dokumentácia.</para>
            <sect2>
                <title>Podpora</title>
                <para>V testoch implementácie a podpory štandardu VoiceXML 2.0, ktoré
                    vykonala <indexterm>
                        <primary>VoiceXML Forum</primary>
                    </indexterm> organizácia VoiceXML Forum v roku 2005, dosiahlo Voxeo
                    Prophecy 100% zhodu so štandardom vo všetkých povinných a nepovinných
                    bodoch. Implementovanú má podporu <indexterm>
                        <primary>SRGS</primary>
                    </indexterm>SRGS a <indexterm>
                        <primary>SSML</primary>
                </indexterm>SSML <citation>19</citation>.</para>
                <para>Medzi podporované vstupy patria hlasový vstup a tóny <indexterm>
                        <primary>DTMF</primary>
                    </indexterm>DTMF. Ako výstupy sú podporované prehrávanie nahrávok a
                    syntéza reči. Syntéza a rozoznávanie reči sú dynamicky podporované pre
                    štyri svetové jazyky (angličtina, francúzština, nemčina a
                    španielčina). Vstup z klávesnice a výstup na terminál nie sú
                    podporované. Vďaka podpore širokej škály programovacích jazykov by
                    nemal byť veľký problém naprogramovať moduly na spoluprácu s ďalšími
                vstupmi a výstupmi.</para>
                <para>Voxeo Prophecy je určené iba pre operačné systémy <indexterm>
                        <primary>Windows</primary>
                    </indexterm>Windows vo verziách 2000, XP a Server 2003. Výrobca
                neuvádza Windows Vista.</para>
            </sect2>
            <sect2>
                <title>Zhrnutie</title>
                <para>Voxeo Prophecy je vyladené komerčné riešenie pripravené na
                    okamžité nasadenie <indexterm>
                        <primary>interpreter VoiceXML</primary>
                </indexterm>interpretera VoiceXML v kombinácii s telefóniou.</para>
                <para>Jeho hlavnou výhodou je, že je ihneď po nainštalovaný pripravený
                    na použitie a má podporu bežných vstupov a výstupov. Výborná a medzi
                    testovanými programami jedinečná je 100% zhoda so štandardom VoiceXML
                2.0.</para>
                <para>Hlavná nevýhoda Voxeo Prophecy je, že ho vzhľadom na jeho
                    licenciu nie je možné zdarma použiť v plnom nasadení. Na ladenie sú
                dva porty postačujúce.</para>
                <para>Voxeo Designer by bolo možné zaradiť medzi výhody, keby bolo
                    možné vytvorené aplikácie VoiceXML exportovať. Jedná sa síce o verziu
                    beta, ale fakt, že sa dialógové aplikácie ukladajú vo vlastnom formáte
                    XML namiesto VoiceXML naznačuje, že výrobca nemá záujem o to, aby boli
                aplikácie exportovateľné.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>JVoiceXML</title>
            <para>JVoiceXML je <indexterm>
                    <primary>interpreter VoiceXML</primary>
                </indexterm>interpreter VoiceXML napísaný v programovacom jazyku
                <indexterm>
                    <primary>Java</primary>
                </indexterm>Java. Je vydávaný pod licenciou <indexterm>
                    <primary>GNU</primary>
                    <secondary>LGPL</secondary>
            </indexterm>GNU LGPL, verzie 2.1.</para>
            <para>Pre súčasnú verziu (0.5.5) je možnosť stiahnuť binárnu platformovo
                nezávislú distribúciu v súbore JAR, balíček RPM a zdrojové kódy.
                Súčasťou distribúcie sú demonštračné príklady, dokumentácia a knižnica
                umožňujúca jednoduché vytváranie dokumentov a aplikácií VoiceXML
            <citation>20</citation>.</para>
            <para>Dokumentácia je k dispozícii vo formáte <indexterm>
                    <primary>JavaDoc</primary>
                </indexterm>JavaDoc na stránkach projektu. Tá istá dokumentácia je
                súčasťou distribúcie. V sekcii Downloads je tiež možné stiahnuť
                používateľskú príručku a inštrukcie na zostavenie, obe vo formátoch
            PostScript a PDF.</para>
            <sect2>
                <title>Podpora</title>
                <para>Implementácia špecifikácie VoiceXML 2.1 v dobe písania tejto
                    práce nie je úplná. Nakoľko je JVoiceXML vo verzii 0.5.5 dá sa
                    v budúcnosti očakávať plná implementácia špecifikácie. Aktuálny
                    prehľad implementovaných elementov je zverejnený na internetových
                stránkach JVoiceXML <citation>21</citation>.</para>
                <para>JVoiceXML zatiaľ nemá implementované vstupné a výstupné
                    rozhrania na spracovanie aplikácií VoiceXML. Zabudovaný <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpreter VoiceXML používa štandardné rozhrania
                    <indexterm>
                        <primary>JSAPI</primary>
                    </indexterm>JSAPI (Java Speech API) a  <indexterm>
                        <primary>JTAPI</primary>
                    </indexterm>JTAPI (Java Telephony API). Naprogramovanie vstupných a
                výstupných rozhraní by preto nemalo byť problematické.</para>
                <para>Kedže sa jedná o Javovú aplikáciu, je platformovo nezávislá
                    a môže byť spustená na akejkoľvek platforme podporujúcej virtuálny
                stroj Java.</para>
            </sect2>
            <sect2>
                <title>Architektúra</title>
                <para>Architektúra JVoiceXML sa skladá z troch hlavných kompenonet –
                    <emphasis>dokumentového servera</emphasis>, <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm> <emphasis>interpretera VoiceXML</emphasis> a
                    <emphasis>implementačnej platformy</emphasis>
                <citation>22</citation>.</para>
                <para><emphasis>Dokumentový server</emphasis> sprístupňuje dokumenty z
                    ich úložiska a predáva ich <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm><emphasis>interpreteru VoiceXML</emphasis>.
                    <emphasis>Interpreter VoiceXML </emphasis>spracúva získané dokumenty
                VoiceXML.</para>
                <para><emphasis>Implementačná platforma</emphasis> obsahuje moduly na
                    zaznamenávanie, spracovanie konfigurácie, vzdialený prístup a
                    spracovanie výnimiek. Obsahuje modul na syntaktickú analýzu a
                vytváranie dokumentov VoiceXML.</para>
                <para>Pripojenie používateľov zabezpečuje <emphasis>rozhranie pre
                    vzdialených klientov</emphasis>. <emphasis>Rozhranie pre externé
                    zdroje</emphasis> implementuje rozhrania <indexterm>
                        <primary>JTAPI</primary>
                    </indexterm>JTAPI a <indexterm>
                        <primary>JSAPI</primary>
                    </indexterm>JSAPI. Pomocou nich pripája <emphasis>syntetizátory a
                    rozoznávače reči</emphasis> a <emphasis>moduly pre
                telefóniu</emphasis>.</para>
                <figure>
                    <title>Architektúra JVoiceXML</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="crawler_overview1.png" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </sect2>
            <sect2>
                <title>Zhrnutie</title>
                <para>JVoiceXML je mladý <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpreter VoiceXML, ktorý má pred sebou dlhú cestu
                vývoja.</para>
                <para>Medzi nesporné výhody JVoiceXML patrí licencia <indexterm>
                        <primary>GNU</primary>
                        <secondary>LGPL</secondary>
                    </indexterm>GNU LGPL a fakt, že je platformovo nezávislý. Výhodné je
                    aj použitie štandardných rozhraní programovacieho jazyka <indexterm>
                        <primary>Java</primary>
                </indexterm>Java pre telefóniu a spracovanie reči.</para>
                <para>Medzi hlavné nevýhody JVoiceXML patrí, nedokončená implementácia
                    podpory štandardu VoiceXML a chýbajúce vstupné a výstupné rozhrania.
                    Toto za nejakú dobu už nebude aktuálne, keďže sa jedná o aktívne sa
                    vyvíjajúci program. V prípade použitia JVoiceXML v špecializovanom
                    nasadení môžu byť požadované neštandardné rozhrania, takže chýbajúce
                rozhrania nemusia byť problém.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>Asterisk</title>
            <para>Asterisk je open source telefonická platforma vyvíjaná
                spoločnosťou Digium. Je vydávaný pod licenciou <indexterm>
                    <primary>GNU</primary>
                    <secondary>GPL</secondary>
                </indexterm>GNU GPL <citation>23</citation>. Asterisk sám o sebe nemá
                podporu VoiceXML. Na to je potrebný prídavok (plugin). Dva prídavky budú
            priblížené v nasledujúcich podkapitolách.</para>
            <para>Modularita a flexibilita Asterisku umožňuje jeho využitie
                v rôznych úlohách. V prípade použitia v úlohe firemnej telefónnej
                <indexterm>
                    <primary>PBX</primary>
                </indexterm>ústredne PBX (Private Branch Exchange) tvorí prepojenie IP
                telefónie s analógovou a digitálnou verejnou telefónnou sieťou. Spravuje
            prepájanie hovorov a konferenčné hovory <citation>24</citation>.</para>
            <para>Vo funkcii brány navzájom prepája rôzne druhy telefónnych sietí a
                prevádza dáta medzi rôznymi protokolmi. Asterisk je možné použiť aj ako
                server <indexterm>
                    <primary>PBX</primary>
                </indexterm>interaktívnej hlasovej odozvy <indexterm>
                    <primary>IVR</primary>
                </indexterm>(IVR) zabezpečujúci konferenčné mosty a automatickú
            obsluhu volajúcich.</para>
            <para>O integráciu Asterisku do stabilnej distribúcie Debian sa stará
                tým Debian <indexterm>
                    <primary>VoIP</primary>
                </indexterm>VoIP Team. Na stiahnutie je k dispozícii vo forme live
                distribúcie pod názvom AsteriskNOW. Na vyskúšanie je určený virtuálny
                stroj pre VMware. Stiahnuť ho je možné aj v balíčkoch RPM a DEB. Získať
            sa dá aj z repozitárov distribúcií.</para>
            <para>Asterisk je navrhnutý pre platformy GNU/Linux, OpenBSD, FreeBSD
                a Mac OS X. Integrácia s ostatnými Unixovými platformami by tiež nemala
            byť problematická.</para>
            <para>Prenosom Asterisku pod operačné systémy <indexterm>
                    <primary>Windows</primary>
                </indexterm>Windows sa zaoberá projekt AsteriskWin32. V súčasnosti je
                dostupná verzia 0.6 založená na verzii Asterisku 1.2.14 (aktuálna verzia
            Asterisku je 1.4.10) <citation>25</citation>.</para>
            <para>Dokumentácia k Asterisku je prístupná online a tiež ako súčasť
            distribúcií. Používateľom je k dispozícii aj online fórum.</para>
            <sect2>
                <title>Podpora</title>
                <para>Asterisk má priamu podporu pre rozšírené zariadenia pre
                    telefóniu. Okrem zariadení vybraných výrobcov podporuje všetky zvukové
                    karty podporujúce ALSA a OSS. Asterisk podporuje štandard isdn4linux
                    a Preto je s ním možné sprevádzkovať koncové <indexterm>
                        <primary>ISDN</primary>
                    </indexterm>zariadenia ISDN, ktoré tento štandard podporujú
                <citation>26</citation>.</para>
                <para>Asterisk podporuje protokoly H.323, Session Initiation Protocol
                    <indexterm>
                        <primary>SIP</primary>
                    </indexterm>(SIP), Media Gateway Control Protocol (MGCP) a Skinny
                    Client Control Protocol (SCCP). Zvuk je podporovaný v kodekoch alaw,
                g722, g729, gsm a ulaw.</para>
            </sect2>
            <sect2>
                <title>Architektúra</title>
                <para>V modulárnej architektúre Asterisku sú jadro a moduly úplne
                    abstrahované od použitých technológií. Toto umožňuje jednoduchšie
                    použitie Asterisku s rôznym technickým a programovým vybavením. Moduly
                    je možné pridávať a uberať podľa požiadaviek na ich využitie. Na
                    komunikáciu s modulmi má jadro štyri rozhrania API. Sú to
                    <emphasis>Kanálové API</emphasis>, <emphasis>Aplikačné API</emphasis>,
                    <emphasis>API práce so súbormi</emphasis> a <emphasis>API prekladu
                kodekov</emphasis> <citation>27</citation>.</para>
                <figure>
                    <title xreflabel="AsteriskArch.png">Architektúra Asterisku</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="crawler_overview1.png" />
                        </imageobject>
                    </mediaobject>
                </figure>
                <para><emphasis>Kanálové API</emphasis> slúži na spracovanie
                    pripojenia, ktorým sa pripája volajúci (<indexterm>
                        <primary>ISDN</primary>
                    </indexterm>ISDN, <indexterm>
                        <primary>VoIP</primary>
                    </indexterm>VoIP, …). Pridáva ďalšie moduly pre nízkoúrovňové
                spracovanie daného pripojenia a použitého kodeku.</para>
                <para><emphasis>Aplikačné API</emphasis> umožňuje pripájanie ďalších
                    aplikácií, ako napríklad aplikácie pre podporu hlasových správ,
                    konferencií a v neposlednom rade aj na spracovanie aplikácií VoiceXML.
                    Spracovanie súborov a prístup k nim má na starosti <emphasis>API práce
                so súbormi</emphasis>.</para>
                <para>Dobrú podporu zvukových kodekov prináša Asterisku <emphasis>API
                    prekladu kodekov</emphasis>. Umožňuje konverzie medzi zvukom v rôznych
                    kódovaniach. Tým je zjednodušené nasadenie Asterisku ako brány medzi
                rôznymi sieťami v telefónii.</para>
                <para>Pre každé API je v jadre interný modul. Prepájanie hovorov za
                    podpory kanálového API zabezpečuje <indexterm>
                        <primary>PBX</primary>
                    </indexterm><emphasis>ústredňa PBX</emphasis>. Prístup k súborom za
                    podpory API práce so súbormi má na starosti <emphasis>plánovač a
                    správca vstupov a výstupov</emphasis>. Spravuje aj nízkoúrovňové
                    plánovanie úloh. Nahrávanie aplikačných modulov a spúšťanie aplikácií
                    spravuje <emphasis>spúšťač aplikácií</emphasis>. Čo najlepšie využitie
                    šírky pásma a čo najvyššiu kvalitu zvuku zabezpečuje
                    <emphasis>prekladač kodekov</emphasis>. Podľa potreby nahráva moduly
                pre jednotlivé kodeky a vykonáva prevody medzi nimi.</para>
            </sect2>
            <sect2>
                <title>Zhrnutie</title>
                <para>Asterisk je robustná platforma pre telefóniu. Je možné ho
                    nasadiť v prostredí veľkých telefónnych sietí poskytovateľov
                    telefónnych služieb ako základ pre internetovú telefóniu. Vo firmách
                    je možné jeho využitie v roli ústredne alebo <indexterm>
                        <primary>IVR</primary>
                </indexterm>IVR.</para>
                <para>Medzi hlavné výhody Asterisku patrí licencia <indexterm>
                        <primary>GNU</primary>
                        <secondary>GPL</secondary>
                    </indexterm>GNU GPL, široké možnosti nasadenia a dobrá
                podpora.</para>
                <para>Kvôli absencii podpory aplikácií VoiceXML je pre účely tejto
                bakalárskej práce nepostačujúci bez prídavku.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>VXIasterisk</title>
            <para>VXIasterisk je proprietárne rozšírenie pre Asterisk rozširujúce
                jeho kapacitu o schopnosť spracovať VoiceXML aplikácie. Pre Asterisk
                1.4.10 je vyžadovaný VXIasterisk vo verzii 2.2
            <citation>28</citation>.</para>
            <para>Prídavok VXIasterisk je distribuovaný ako binárna inštalácia.
                Obsahuje syntetizátor reči Flite. Spoločnosť I6net pridala do
            distribúcie aj detektor ticha VSD (Voice Silence Detector).</para>
            <para>VXIasterisk je komerčný proprietárny program s potrebou zakúpenia
                licencie. Po registrácii je možné získať verziu s obmedzením na jeden
                port – počet liniek ostáva neobmedzený, ale súčasne môže prebiehať iba
                jeden hovor. V tomto prípade je licencia zadarmo. V prípade potreby
                viacerých portov alebo možnosti spracovania videa je potrebné zakúpiť
            licenciu <citation>29</citation>.</para>
            <para>Dokumentácia je, ako aj stiahnutie programu, dostupná len pre
                registrovaných používateľov. Po prihlásení majú používatelia
                k dispozícii krátkeho sprievodcu inštaláciou a základnou konfiguráciou,
                oba sú online na stránkach spoločnosti i6net. Vo formáte PDF je možné
            stiahnuť sprievodcu pre vývojárov aplikácií VoiceXML.</para>
            <sect2>
                <title>Podpora</title>
                <para>VXIasterisk je založený na open source prehliadači VoiceXML –
                    <indexterm>
                        <primary>OpenVXI</primary>
                    </indexterm>OpenVXI. Má implementovanú podporu pre modul <indexterm>
                        <primary>CCXML</primary>
                    </indexterm>CCXML implementovaný Asteriskom. Od verzie 1.4 plne
                    podporuje štandard VoiceXML 2.0. Podporuje aj väčšinu jeho rozšírenia
                VoiceXML 2.1.</para>
                <para>Vďaka tomu, že obsahuje obecný HTTP konektor, je možné ho
                    integrovať so syntetizátormi zvuku Verbio, Loquendo, Cepstral, Nuance
                a ďalšími.</para>
                <para>Podporované sú linuxové operačné systémy s jadrom 2.6 a vyšším.
                    Autori uvádzajú, že je VXIasterisk testovaný s linuxovými
                    distribúciami AsteriskNOW, SUSE, Ubuntu, Debian Sarge, a ďalšími
                    neuvedenými distribúciami založenými na distribúcii Debian. Balíčky
                    pre distribúcie Redhat a TriBox nie sú k dispozícii
                <citation>30</citation>.</para>
            </sect2>
            <sect2>
                <title>Zhrnutie</title>
                <para>VXIasterisk je funkčný proprietárny program na pridanie podpory
                aplikácií VoiceXML k Asterisku. Je pripravený na nasadenie.</para>
                <para>Hlavnou výhodou je možnosť integrácie s rôznymi syntetizátormi
                    reči. Zaujímavá je možnosť pridania videovýstupu v komerčnej
                verzii.</para>
                <para>Komerčná licencia znemožňuje ostré nasadenie zdarma. Obmedzená
                voľná verzia je postačujúca na ladenie.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>VoiceGlue</title>
            <para>VoiceGlue je ďalšie rozšírenie pre Asterisk umožňujúce spracovanie
                aplikácií VoiceXML. Je založené na open source riešeniach a vydávané pod
                licenciou <indexterm>
                    <primary>GNU</primary>
                    <secondary>LGPL</secondary>
                </indexterm>GNU GPL. Vzniklo s potrebou integrácie Asterisku
                a prehliadača <indexterm>
                    <primary>OpenVXI</primary>
                </indexterm>OpenVXI, čoho priamy následok bolo zaistenie podpory
            aplikácií VoiceXML pre Asterisk <citation>31</citation>.</para>
            <para>Program je možné sťahovať zo stránky autorov vo forme balíka
                tar.gz. V distribúcii je zahrnutý aj syntetizátor reči Flite.
                Dokumentácia je prístupná online na domovských stránkach programu. Tá
                istá dokumentácia je zahrnutá aj v distribúcii. Poskytuje základné
                požiadavky na inštaláciu, stručného sprievodcu používateľa a zoznam
                zatiaľ nepodporovaných častí rozšírenej špecifikácie VoiceXML
            2.1.</para>
            <sect2>
                <title>Podpora</title>
                <para>VoiceGlue v súčasnej verzii 0.6 z 1. augusta tohto roku
                    podporuje nahrané zvukové stopy vo všetkých formátoch podporovaných
                    Asteriskom. Vďaka integrovanému <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpretru <indexterm>
                        <primary>OpenVXI</primary>
                    </indexterm>OpenVXI 3.4 plne podporuje štandard VoiceXML 2.0 a
                čiastočne jeho rozšírenie VoiceXML 2.1 <citation>32</citation>.</para>
                <para>Výhodou je podpora distribuovaného spracovania, keď VoiceGlue
                    nemusí byť spustené na tom istom serveri, ako je spustený Asterisk a
                    je tak možné zdieľať zdroje. S Asteriskom je možné zdieľať
                    vyrovnávaciu pamäť rozoznávača a syntetizátora reči, zvukových súborov
                    a gramatík. Podpora gramatík <indexterm>
                        <primary>SRGS</primary>
                </indexterm>SRGS nie je zatiaľ úplná.</para>
                <para>VoiceGlue je určený pre beh na Asterisku, ktorý by malo byť
                    možné sprevádzkovať asi na všetkých Unixových platformách. Autori sa
                    v dokumentácii odkazujú iba na distribúciu Fedora, pretože nemajú
                    dokumentáciu napísanú pre iné distribúcie. Tiež sa zmieňujú o tom, že
                    by nemal byť problém spojazdniť VoiceGlue na akejkoľvek Unixovej
                platforme <citation>33</citation>.</para>
                <para>Štandardne je podporovaný vstup pomocou tónov <indexterm>
                        <primary>DTMF</primary>
                    </indexterm>DTMF. Podporovaný je aj hlasový vstup. VoiceGlue zatiaľ
                    nepodporuje rozoznávanie reči, takže ho je možné len nahrávať.
                    Štandardne podporovaný výstup je zvukový výstup – buď nahrávka (vo
                    formátoch podporovaných Asteriskom) alebo syntéza reči pomocou
                    vstavaného syntetizátora Flite. V prípade potreby podpory ďalších
                    vstupov a výstupov sú dve možnosti. Modul zaisťujúci podporu je možné
                    pridať k Asterisku a volať ho z VoiceGlue. Druhá možnosť je pridanie
                modulu do VoiceGlue.</para>
                <para>Medzi podporované zatiaľ nepatrí sémantická interpretácia
                    gramatík <indexterm>
                        <primary>DTMF</primary>
                    </indexterm>DTMF, zmeny časových limitov, rozoznávanie reči,
                    značkovací jazyk <indexterm>
                        <primary>SSML</primary>
                    </indexterm>SSML a nahrávanie v iných formátoch, ako raw ulaw
                <citation>34</citation>.</para>
                <para>V budúcich verziách sa chystá plná podpora štandardu VoiceXML
                    2.1, podpora pre rozoznávanie reči pomocou rozoznávača reči LumeVox,
                    kvalitnejšia syntéza reči, a samozrejme ostatné vyššie uvedené
                    nepodporované funkcie <citation>35</citation>. Medzi ďalšie ambície
                    autorov patrí tiež úspešné absolvovanie testov zhody so štandardom
                    VoiceXML u <indexterm>
                        <primary>VoiceXML Forum</primary>
                    </indexterm>organizácie VoiceXML Forum. Autori sa tiež zmieňujú
                    o implementácii VoiceGlue v odľahčenej verzii pre prenosné
                zariadenia.</para>
            </sect2>
            <sect2>
                <title>Architektúra</title>
                <para>Prepojenie medzi VoiceGlue a Asteriskom zabezpečuje medzivrstva
                    PhoneGlue napísaná v programovacom jazyku <indexterm>
                        <primary>Perl</primary>
                </indexterm>Perl.</para>
                <figure>
                    <title>Architektúra VoiceGlue</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="crawler_overview1.png" />
                        </imageobject>
                    </mediaobject>
                </figure>
                <para>VoiceGlue je možné logicky rozdeliť na tri hlavné časti –
                    <emphasis>sieťovú</emphasis>, <emphasis>časť spracúvajúcu dokumenty
                    VoiceXML </emphasis> a <emphasis>rozhranie pre
                </emphasis><emphasis>telefóniu</emphasis>.</para>
                <para><emphasis>Sieťová časť</emphasis> komunikuje s webovým serverom
                    spracúvajúcim aplikácie VoiceXML. Prenáša dokumenty VoiceXML – buď
                    statické alebo dynamicky generované. Komunikácia prebieha protokolom
                HTTP nad TCP/IP <citation>36</citation>.</para>
                <para><emphasis>Časť spracúvajúca dokumenty VoiceXML</emphasis> sa
                    skladá z viacerých modulov. Pred spracovaním dokumentov VoiceXML
                    <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpreterom <indexterm>
                        <primary>OpenVXI</primary>
                    </indexterm>OpenVXI sú tieto najprv analyzované syntaktickým
                    analyzátorom Xerces. Prípadné skripty jazyka <indexterm>
                        <primary>ECMAScript</primary>
                    </indexterm>ECMAScript spracúva modul SpiderMonkey. Súčasťou je tiež
                modul na vytváranie záznamov.</para>
                <para><emphasis>Rozhranie pre telefóniu</emphasis> sa skladá z ďalších
                    troch častí. Časť rozoznávania reči pomocou rozoznávača LumeVox ešte
                    nie je implementovaná. Časť pre výzvy používateľa pripája syntetizátor
                    reči Flite. Posledná časť komunikuje s medzivrstvou
                    <emphasis>PhoneGlue</emphasis> pomocou správ SATC nad protokolom
                TCP/IP.</para>
            </sect2>
            <sect2>
                <title>Zhrnutie</title>
                <para>VoiceGlue je ešte len začínajúci <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpreter VoiceXML aplikácií, ktorý už teraz ponúka
                    zaujímavé možnosti. Medzi jeho hlavné výhody patrí to, že je open
                    source a je možné ho upraviť a rozšíriť pre vlastné potreby (v rámci
                    licencie <indexterm>
                        <primary>GNU</primary>
                        <secondary>GPL</secondary>
                    </indexterm>GNU GPL). Toto sa hodí hlavne pri potrebe podpory
                    ďalších požadovaných funkcií. Medzi ne môže patriť napríklad vstup
                z klávesnice a výstup na terminál.</para>
                <para>Medzi hlavné nevýhody patrí to, že zatiaľ nemá plnú podporu
                    rozoznávania reči a gramatík <indexterm>
                        <primary>SRGS</primary>
                    </indexterm>SRGS. Jeho vývoj stále napreduje a jeho funkčnosť sa
                rozširuje, takže toto onedlho už nebude platiť.</para>
                <para>V prípade, že sa nevyžaduje plná podpora štandardu VoiceXML 2.1
                    pri nasadení aplikácií VoiceXML v kombinácii s telefóniou, je
                    kombinácia Asterisku spolu s VoiceGlue veľmi dobrým riešením. Medzi
                    nesporné výhody takéhoto riešenia patrí aj nulová cena
                programu.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>Zhrnutie porovnaných programov</title>
            <para>Väčšina testovaných programov bola platformovo závislá. Pre
                platformu Unix je prirodzene väčší výber <indexterm>
                    <primary>interpreter VoiceXML</primary>
                </indexterm>interpreterov VoiceXML, ktoré sú k dispozícii bezplatne.
                Proprietárne riešenia mali vyššie číslo verzie, a aj preto lepšiu
            podporu vstupov a výstupov.</para>
            <para>Podpora špecifikácií VoiceXML 2.0 a VoiceXML 2.1 je na dobrej
                úrovni, keď väčšina programov podporuje aspoň špecifikáciu VoiceXML
            2.0.</para>
            <para>Medzi vstupmi bola bežne podporovaná tónová voľba (<indexterm>
                    <primary>DTMF</primary>
                </indexterm>DTMF) a hlasový vstup. Medzi výstupmi boli podporované
                syntéza reči a prehrávanie nahrávok. Vstup z klávesnice a výstup na
            terminál podporované neboli. Je ich ale možné doplniť.</para>
            <para>V tabuľke 4.1 je uvedený stručný prehľad vlastností porovnaných
            programov.</para>
            <table frame="all" pgwide="1">
                <title>Prehľad porovnaných programov</title>
                <tgroup cols="5">
                    <colspec align="left" colname="col1" colwidth="3,6cm" />
                    <colspec align="left" colname="col2" colwidth="2,8cm" />
                    <colspec align="left" colname="col3" colwidth="2,2cm" />
                    <colspec align="left" colname="col4" colwidth="2,4cm" />
                    <colspec align="left" colname="col5" colwidth="1,7cm" />
                    <tbody>
                        <row>
                            <entry></entry>
                            <entry>Voxeo Prophecy</entry>
                            <entry>JVoiceXML</entry>
                            <entry>VXIasterisk</entry>
                            <entry>VoiceGlue</entry>
                        </row>
                        <row>
                            <entry>Číslo verzie</entry>
                            <entry>8.0.98.2</entry>
                            <entry>0.5.5</entry>
                            <entry>2.2</entry>
                            <entry>0.6</entry>
                        </row>
                        <row>
                            <entry>Vstupy (ladenie)</entry>
                            <entry><indexterm>
                                    <primary>DTMF</primary>
                            </indexterm>DTMF, reč</entry>
                            <entry align="center">–</entry>
                            <entry>DTMF</entry>
                            <entry>DTMF</entry>
                        </row>
                        <row>
                            <entry>Vstupy (nasadenie)</entry>
                            <entry>DTMF, reč(2 porty)</entry>
                            <entry align="center">–</entry>
                            <entry>DTMF (1 port)</entry>
                            <entry>DTMF</entry>
                        </row>
                        <row>
                            <entry>Výstupy (ladenie)</entry>
                            <entry>Syntéza, nahrávky</entry>
                            <entry align="center">–</entry>
                            <entry>Syntéza, nahrávky</entry>
                            <entry>Syntéza, nahrávky</entry>
                        </row>
                        <row>
                            <entry>Výstupy (nasadenie)</entry>
                            <entry>Syntéza, nahrávky (2 porty)</entry>
                            <entry align="center">–</entry>
                            <entry>Syntéza, nahrávky (1 port)</entry>
                            <entry>Syntéza, nahrávky</entry>
                        </row>
                        <row>
                            <entry>Podporované OS</entry>
                            <entry>Win 200x, XP</entry>
                            <entry><indexterm>
                                    <primary>Java</primary>
                            </indexterm>Java</entry>
                            <entry align="left" nameend="col5" namest="col4">Asterisk (BSD,
                            Linux, Mac OS)</entry>
                        </row>
                        <row>
                            <entry>Licencia</entry>
                            <entry>2 porty zdarma</entry>
                            <entry><indexterm>
                                    <primary>GNU</primary>
                                    <secondary>LGPL</secondary>
                            </indexterm>GNU LGPL</entry>
                            <entry>1 port zdarma</entry>
                            <entry>GNU GPL</entry>
                        </row>
                        <row>
                            <entry>Verzia VoiceXML</entry>
                            <entry>2.0 (100% zhoda)</entry>
                            <entry>čiastočne 2.1</entry>
                            <entry align="left" nameend="col5" namest="col4">Plne 2.0,
                            čiastočne 2.1</entry>
                        </row>
                        <row>
                            <entry>Zdrojový kód</entry>
                            <entry>nie</entry>
                            <entry>áno</entry>
                            <entry>nie</entry>
                            <entry>áno</entry>
                        </row>
                        <row>
                            <entry>Rozšíriteľnosť</entry>
                            <entry>áno</entry>
                            <entry>áno</entry>
                            <entry>nie</entry>
                            <entry>áno</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>Voxeo Prophecy je dokončená aplikácia s plnou podporou štandardu.
                Je vhodný na ladenie, pretože licenčné dôvody obmedzujú možnosti jeho
                ostrého bezplatného nasadenia. Voxeo Prophecy je ale na plné nasadenie
            plne vybavený a pripravený.</para>
            <para>JVoiceXML ešte nie je dokončený. Okrem implementácie plnej podpory
                štandardu VoiceXML 2.1 je potrebné doplniť aj vstupné a výstupné
            rozhrania.</para>
            <para>Asterisk je robustná platforma s rozsiahlou podporou rôznych
                riešení v oblasti telefónie. Je preto vhodný na väčšie nasadenie v
                prostredí telefónie. Na spracovanie aplikácií VoiceXML je potrebný
            prídavok.</para>
            <para>Prídavky VXIasterisk a VoiceGlue sú si funkciami veľmi podobné.
                Majú rovnakú podporu štandardu VoiceXML, nakoľko sú oba postavené na
                <indexterm>
                    <primary>interpreter VoiceXML</primary>
                </indexterm>interpeteri <indexterm>
                    <primary>OpenVXI</primary>
                </indexterm>OpenVXI. Používajú rovnaký syntetizátor reči. Obom
            programom chýba podpora rozoznávania reči.</para>
            <para>VXIasterisk je vzhľadom na jeho licenciu použiteľný iba na
                ladenie. Zaujímavosťou je podpora videovýstupu, ktorý ale nie je vôbec
            dostupný zdarma.</para>
            <para>Licencia VoiceGlue dovoľuje ostré nasadenie. Ďalšie požadované
                funkcie je možné doprogramovať, keďže sa jedná o program pod licenciou
                <indexterm>
                    <primary>GNU</primary>
                    <secondary>GPL</secondary>
            </indexterm>GNU GPL so zverejnenými zdrojovými kódmi.</para>
            <sect2>
                <title>Možnosti nasadenia programov</title>
                <para>V prípade, potreby nasadenia <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpretera VoiceXML bez potreby integrácie
                    s telefóniou je najlepšou voľbou JVoiceXML aj kvôli platformovej
                    nezávislosti. Je ešte potrebné do neho naprogramovať rozhrania a
                dokončiť podporu štandardu VoiceXML.</para>
                <para>Potrebu okamžitého nasadenia <indexterm>
                        <primary>interpreter VoiceXML</primary>
                    </indexterm>interpretera VoiceXML s bezplatnou licenciou
                    jednoznačnou rieši kombinácia Asterisku s prídavkom VoiceGlue, nakoľko
                VoiceGlue má plnú podporu štandardu VoiceXML 2.0.</para>
                <para>Ak by bola vyžadovaná plná podpora štandardu VoiceXML 2.1, bolo
                    by nutné siahnuť po Voxeo Prophecy, ktorý je pri väčšom nasadení
                    platený. Cenu nasadenie zvyšuje aj fakt, že je nutné ho prevádzkovať
                    na proprietárnych operačných systémoch od spoločnosti
                Microsoft.</para>
            </sect2>
        </sect1>
    </chapter>
    <chapter>
        <title>Dialógová aplikácia VoiceXML</title>
        <para>Súčasťou zadania tejto práce je vytvorenie jednoduchej dialógovej
            aplikácie. Aplikácia je určená na demonštráciu funkčnosti porovnávaných
        programov a jednoduchosti aplikácií VoiceXML.</para>
        <para>Dialógová aplikácia VoiceXML bude reprezentovať telefonickú linku
            autoservisu s predajňou a bazárom automobilov. Používateľ sa bude môcť
            pohybovať vo viacerých úrovniach ponúk. Navigovať sa bude pomocou reči
            alebo tónovej voľby (<indexterm>
                <primary>DTMF</primary>
            </indexterm>DTMF). V aplikácii budú tiež ošetrené stavy chybného zadania
            zo strany používateľa. Tiež bude ošetrený prípad, že používateľ nezadá
            nič. Oboje bude rozlíšené na prvé chybné alebo chýbajúce zadanie a na
            ďalšie zadanie. Používateľ bude mať k dispozícii aj pomocníka. Koncové
            úrovne budú presmerované na operátora. Pri presmerovaní bude ošetrená
        situácia obsadenej linky a neprijatého hovoru.</para>
        <sect1>
            <title>Riešenie</title>
            <para>Aplikácie je vytvorená v anglickom jazyku kvôli podpore
                rozoznávačom a syntetizátorom reči. Po zatelefonovaní na linku servisu
                je používateľ prepojený do aplikácie VoiceXML. Z hlavnej ponuky je možné
                dostať sa do ďalších ponúk rozdelených tematicky. Používateľ sa môže
                presunúť buď stlačením tlačidla tónovej voľby alebo vyslovením danej
            položky (ak to daný systém podporuje).</para>
            <para>V každej ponuke je používateľovi umožnené požiadať o pomoc. Po
                prehraní pomoci sú používateľovi znovu prehrané možnosti ponuky. Pre
                každú úroveň sú definované aj ošetrenia nezadaného vstupu alebo vstupu
                nezhodujúceho sa so žiadnou z ponúkaných možností. Ošetrenie sú
                rozdelené podľa počtu chybných alebo chýbajúcich zadaní. Pri prvom
                chybnom alebo chýbajúcom zadaní je používateľovi vysvetlené, čo sa stalo
                a je požiadaný o nové zadanie. Potom sú mu znovu prehrané možnosti
                ponuky. Pri treťom prípade chybného alebo chýbajúceho zadania je
                používateľ odpojený. Vo všetkých úrovniach okrem najvyššej je
            používateľovi umožnené sa vrátiť do hlavnej ponuky.</para>
            <para>Navigácia je kvôli ukážkovosti zdrojového kódu riešená rôznymi
                spôsobmi pomocou formulárov a ponúk. Ponuka bazáru je uvedená v hlavnom
                dokumente aplikácie (mainmenu.vxml). Ďalšie ponuky druhej úrovne sa
            nachádzajú v samostatných súboroch.</para>
            <para>Presmerovanie na operátora je riešené tromi rôznymi spôsobmi.
                Najmenej pružné je uvedenie presmerovania v danom formulári, z ktorého
                je presmerovanie vykonávané. Pružnejšie a dobre prispôsobiteľné je
                riešenie, keď je presmerovanie presunuté do samostatného formulára,
                ktorý môže ostať v tom istom dokumente VoiceXML. Použitá je aj možnosť,
                pri ktorej je formulár presmerovania umiestnený do samostatného súboru
            (tooperator.vxml).</para>
            <para>Chybu prepájania na operátora majú všetky formuláre presmerovanú
                do súboru goodbye.vxml. Tento súbor umožňuje používateľovi znovu skúsiť
                spojenie s operátorom alebo sa vrátiť do hlavnej ponuky. V prípade
                chýbajúceho alebo chybného zadania používateľa je telefonát po rozlúčke
            ukončený.</para>
            <para>Na obrázku 5.1 je zobrazená mapa aplikácie. Číslice pri šípkach
                určujú čísla kláves <indexterm>
                    <primary>DTMF</primary>
                </indexterm>DTMF použiteľných na prechod. Kvôli prehľadnosti nie sú
                uvedené slovné výrazy. Slovné výrazy a čísla kláves <indexterm>
                    <primary>DTMF</primary>
            </indexterm>DTMF sú súčasťou inštrukcií pre používateľa.</para>
            <para>V zdrojovom kóde aplikácie je možné nájsť komentáre popisujúce
            jednotlivé elementy a riešenia.</para>
            <figure>
                <title>Mapa aplikácie VoiceXML</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="crawler_overview1.png" />
                    </imageobject>
                </mediaobject>
            </figure>
        </sect1>
        <sect1>
            <title>Zhrnutie</title>
            <para>Vytvorená dialógová aplikácia VoiceXML prezentuje jednoduchosť a
                prehľadnosť aplikácií VoiceXML umožnenú vysokou úrovňou abstrakcie nad
            prostredím, v ktorom má byť sprevádzkovaná.</para>
            <para>Ukazuje rôzne možnosti riešenia navigácie v aplikácii a jemnosť
                spracovania používateľského vstupu. Prehľadné a jemné je aj riešenie
                spracovania chybných a chýbajúcich zadaní zo strany používateľa.
                VoiceXML je silný jazyk, ktorý poskytuje široké možnosti pre vývojárov
            dialógových aplikácií.</para>
            <para>S podobnými a rozsiahlejšími aplikáciami, ako je táto sa môžu
                ľudia stretnúť na zákazníckych linkách telekomunikačných operátorov,
            finančných, poisťovacích a ďalších spoločností.</para>
        </sect1>
    </chapter>
    <chapter>
        <title>Záver</title>
        <para>Trh <indexterm>
                <primary>interpreter VoiceXML</primary>
            </indexterm>interpreterov VoiceXML je z väčšej časti obsadený komerčnými
            riešeniami. Väčšina z nich nie je voľne prístupná ani na odskúšanie. Táto
            bakalárska práca predstavila voľne dostupné interpretery aplikácií
        VoiceXML s rôznymi možnosťami využitia a rôznymi parametrami.</para>
        <para>Predstavené komerčné riešenia sú voľne prístupné len na omedzené
            použitie. Podpora štandardov, vstupov a výstupov je u nich na dobrej
        úrovni.</para>
        <para>Open source riešenia zatiaľ nedosiahli číslo verzie 1.0. Výhľad do
            budúcnosti je veľmi dobrý, nakoľko sú stále vo vývoji ambiciózne open
            source riešenia, ktoré by mali poskytovať pri najmenšom rovnakú funkčnosť,
            ako komerčné riešenia. Príkladom dokončeného konkurencieschopného open
            source riešenia pre telefóniu je Asterisk. Jeho predstavené prídavky, open
            source VoiceGlue a komerčný VXIasterisk, sú funkčne celkom
        vyrovnané.</para>
        <para>Dialógová aplikácia Autoservis je ukážkou použitia dialógovej
            aplikácie ako zákazníckej linky s navigáciou ponukami a výberom možností.
            Táto aplikácia tiež ukazuje jednoduchosť a prehľadnosť aplikácií
        VoiceXML.</para>
    </chapter>
    <bibliography>
        <bibliodiv>
            <biblioentry>
                <abbrev>01</abbrev>
                <author>
                    <surname>WebArchiv</surname>
                </author>
                <title>WebArchiv - archiv českého webu [online]</title>
                <publisher>
                    <publishername>WebArchiv</publishername>
                </publisher>
                <pubdate>09.04.2008</pubdate>
                <releaseinfo>
                    <ulink url="http://www.webarchiv.cz">
                        http://www.webarchiv.cz
                    </ulink>
                </releaseinfo>            
            </biblioentry>
            <biblioentry>
                <abbrev>02</abbrev>
                <author>
                    <surname>WebArchiv</surname>
                </author>
                <title>Kritéria výběru webových zdrojů [online]</title>
                <publisher>
                    <publishername>WebArchiv</publishername>
                </publisher>
                <pubdate>09.04.2008</pubdate>
                <releaseinfo>
                    <ulink url="http://www.webarchiv.cz/kriteria">
                        http://www.webarchiv.cz/kriteria
                    </ulink>
                </releaseinfo>            
            </biblioentry>
            <biblioentry>
                <abbrev>03</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Overview of the crawler [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo>
                    <ulink url="http://crawler.archive.org/articles/developer_manual/overview.html">
                        http://crawler.archive.org/articles/developer_manual/overview.html
                    </ulink>
                </releaseinfo>            
            </biblioentry>
            <biblioentry>
                <abbrev>04</abbrev>
                <author>
                    <surname>robotstxt.org</surname>
                </author>
                <title>About /robots.txt [online]</title>
                <publisher>
                    <publishername>robotstxt.org</publishername>
                </publisher>
                <pubdate>01.04.2008</pubdate>
                <releaseinfo><ulink
                    url="http://www.robotstxt.org/robotstxt.html">http://www.robotstxt.org/robotstxt.html</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>05</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Some notes on the URI classes [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo><ulink
                    url="http://crawler.archive.org/articles/developer_manual/uri.html">http://crawler.archive.org/articles/developer_manual/uri.html</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>06</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Settings [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo><ulink
                    url="http://crawler.archive.org/articles/developer_manual/settings.html">http://crawler.archive.org/articles/developer_manual/settings.html</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>07</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Common needs for all configurable modules [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo><ulink
                    url="http://crawler.archive.org/articles/developer_manual/chap_modules_common.html">http://crawler.archive.org/articles/developer_manual/chap_modules_common.html</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>08</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Writing Frontier [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo><ulink
                    url="http://crawler.archive.org/articles/developer_manual/frontier.html">http://crawler.archive.org/articles/developer_manual/frontier.html</ulink></releaseinfo>
            </biblioentry>            
            <biblioentry>
                <abbrev>09</abbrev>
                <author>
                    <surname>Internet Archive</surname>
                </author>
                <title>Writing Filter [online]</title>
                <publisher>
                    <publishername>Internet Archive</publishername>
                </publisher>
                <pubdate>26.03.2008</pubdate>
                <releaseinfo><ulink
                    url="http://crawler.archive.org/articles/developer_manual/writefilter.html">http://crawler.archive.org/articles/developer_manual/writefilter.html</ulink></releaseinfo>
            </biblioentry>            
            <biblioentry>
                <abbrev>10</abbrev>
                <author>
                    <surname>Ecma International</surname>
                </author>
                <title>Standard ECMA-357 [online]</title>
                <publisher>
                    <publishername>Ecma International</publishername>
                </publisher>
                <pubdate>2005</pubdate>
                <releaseinfo><ulink
                    url="http://www.ecma-international.org/publications/standards/Ecma-357.htm">http://www.ecma-international.org/publications/standards/Ecma-357.htm</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>11</abbrev>
                <author>
                    <surname>Mozilla Developer Center</surname>
                </author>
                <title>E4X - MDC [online]</title>
                <publisher>
                    <publishername>Mozilla Developer Center</publishername>
                </publisher>
                <pubdate>29.7.2007</pubdate>
                <releaseinfo><ulink
                    url="http://developer.mozilla.org/en/docs/E4X">http://developer.mozilla.org/en/docs/E4X</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>12</abbrev>
                <author>
                    <surname>W3C</surname>
                </author>
                <title>Speech Synthesis Markup Language (SSML) Version 1.0
                [online]</title>
                <publisher>
                    <publishername>W3C</publishername>
                </publisher>
                <pubdate>7.9.2004</pubdate>
                <releaseinfo><ulink
                    url="http://www.w3.org/TR/2004/REC-speech-synthesis-20040907/">http://www.w3.org/TR/2004/REC-speech-synthesis-20040907/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>13</abbrev>
                <author>
                    <surname>W3C</surname>
                </author>
                <title>Speech Recognition Grammar Specification Version 1.0
                [online]</title>
                <publisher>
                    <publishername>W3C</publishername>
                </publisher>
                <pubdate>16.3.2004</pubdate>
                <releaseinfo><ulink
                    url="http://www.w3.org/TR/2004/REC-speech-grammar-20040316/">http://www.w3.org/TR/2004/REC-speech-grammar-20040316/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>14</abbrev>
                <author>
                    <surname>W3C</surname>
                </author>
                <title>Semantic Interpretation for Speech Recognition (SISR) Version
                1.0 [online]</title>
                <publisher>
                    <publishername>W3C</publishername>
                </publisher>
                <pubdate>5.4.2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.w3.org/TR/2007/REC-semantic-interpretation-20070405/">http://www.w3.org/TR/2007/REC-semantic-interpretation-20070405/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>15</abbrev>
                <author>
                    <surname>W3C</surname>
                </author>
                <title>Pronunciation Lexicon Specification (PLS) Version 1.0
                [online]</title>
                <publisher>
                    <publishername>W3C</publishername>
                </publisher>
                <pubdate>26.10.2006</pubdate>
                <releaseinfo><ulink
                    url="http://www.w3.org/TR/2006/WD-pronunciation-lexicon-20061026/">http://www.w3.org/TR/2006/WD-pronunciation-lexicon-20061026/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>16</abbrev>
                <author>
                    <surname>Wikipedia</surname>
                </author>
                <title>Speech synthesis - Wikipedia, the free encyclopedia
                [online]</title>
                <publisher>
                    <publishername>Wikipedia</publishername>
                </publisher>
                <pubdate>14.12.2007</pubdate>
                <releaseinfo><ulink
                    url="http://en.wikipedia.org/wiki/Speech_synthesis">http://en.wikipedia.org/wiki/Speech_synthesis</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>17</abbrev>
                <author>
                    <surname>Wikipedia</surname>
                </author>
                <title>Speech recognition - Wikipedia, the free encyclopedia
                [online]</title>
                <publisher>
                    <publishername>Wikipedia</publishername>
                </publisher>
                <pubdate>15.12.2007</pubdate>
                <releaseinfo><ulink
                    url="http://en.wikipedia.org/wiki/Speech_recognition">http://en.wikipedia.org/wiki/Speech_recognition</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>18</abbrev>
                <author>
                    <surname>Voxeo Corporation</surname>
                </author>
                <title>Voxeo Prophecy Voice Platform [online]</title>
                <publisher>
                    <publishername>Voxeo Corporation</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voxeo.com/prophecy/">http://www.voxeo.com/prophecy/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>19</abbrev>
                <author>
                    <surname>Voxeo Corporation</surname>
                </author>
                <title>VoiceXML IVR / VOIP IVR / SIP IVR Platform [online]</title>
                <publisher>
                    <publishername>Voxeo Corporation</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voxeo.com/products/voicexml-ivr-platform.jsp">http://www.voxeo.com/products/voicexml-ivr-platform.jsp</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>20</abbrev>
                <author>
                    <firstname>Dirk</firstname>
                    <surname>Schnelle</surname>
                </author>
                <title>Download JVoiceXML [online]</title>
                <publisher>
                    <publishername>Schnelle, Dirk et al.</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://jvoicexml.sourceforge.net/downloads.htm">http://jvoicexml.sourceforge.net/downloads.htm</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>21</abbrev>
                <author>
                    <firstname>Dirk</firstname>
                    <surname>Schnelle</surname>
                </author>
                <title>JVoiceXML Documentation [online]</title>
                <publisher>
                    <publishername>Schnelle, Dirk et al.</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://jvoicexml.sourceforge.net/documentation.htm">http://jvoicexml.sourceforge.net/documentation.htm</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>22</abbrev>
                <author>
                    <firstname>Dirk</firstname>
                    <surname>Schnelle</surname>
                </author>
                <title>Architecture of JVoiceXML [online]</title>
                <publisher>
                    <publishername>Schnelle, Dirk et al.</publishername>
                </publisher>
                <pubdate>2006</pubdate>
                <releaseinfo><ulink
                    url="http://downloads.sourceforge.net/jvoicexml/jvxml-architecture-0.0.9.pdf">http://downloads.sourceforge.net/jvoicexml/jvxml-architecture-0.0.9.pdf</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>23</abbrev>
                <author>
                    <surname>Digium, Inc</surname>
                </author>
                <title>Asterisk :: The Open Source Telephony Platform | About Asterisk
                [online]</title>
                <publisher>
                    <publishername>Digium, Inc</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.asterisk.org/support/about">http://www.asterisk.org/support/about</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>24</abbrev>
                <author>
                    <surname>Digium, Inc</surname>
                </author>
                <title>Asterisk :: The Open Source Telephony Platform | Features
                [online]</title>
                <publisher>
                    <publishername>Digium, Inc</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.asterisk.org/support/features">http://www.asterisk.org/support/features</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>25</abbrev>
                <author>
                    <surname>AsteriskWin32</surname>
                </author>
                <title>AsteriskWin32 - The Open Source PBX for Windows
                [online]</title>
                <publisher>
                    <publishername>AsteriskWin32</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.asteriskwin32.com/">http://www.asteriskwin32.com/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>26</abbrev>
                <author>
                    <surname>Digium, Inc</surname>
                </author>
                <title>Asterisk :: The Open Source Telephony Platform | Hardware
                [online]</title>
                <publisher>
                    <publishername>Digium, Inc</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.asterisk.org/support/hardware">http://www.asterisk.org/support/hardware</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>27</abbrev>
                <author>
                    <surname>Digium, Inc</surname>
                </author>
                <title>Asterisk :: The Open Source Telephony Platform | Architecture
                [online]</title>
                <publisher>
                    <publishername>Digium, Inc</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.asterisk.org/support/architecture">http://www.asterisk.org/support/architecture</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>28</abbrev>
                <author>
                    <surname>I6NET</surname>
                </author>
                <title>products.i6net.com [online]</title>
                <publisher>
                    <publishername>I6NET</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://products.i6net.com/index.php?tg=entry&amp;idx=view&amp;article=108">http://products.i6net.com/index.php?tg=entry&amp;idx=view&amp;article=108</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>29</abbrev>
                <author>
                    <surname>I6NET</surname>
                </author>
                <title>products.i6net.com [online]</title>
                <publisher>
                    <publishername>I6NET</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://products.i6net.com/index.php?tg=faq&amp;idx=questions&amp;item=2">http://products.i6net.com/index.php?tg=faq&amp;idx=questions&amp;item=2</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>30</abbrev>
                <author>
                    <surname>I6NET</surname>
                </author>
                <title>products.i6net.com [online]</title>
                <publisher>
                    <publishername>I6NET</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://products.i6net.com/index.php?tg=entry&amp;idx=view&amp;article=71">http://products.i6net.com/index.php?tg=entry&amp;idx=view&amp;article=71</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>31</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>VoiceGlue &gt;&gt; History [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voiceglue.org/about/history/">http://www.voiceglue.org/about/history/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>32</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>VoiceGlue &gt;&gt; Features [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voiceglue.org/about/features/">http://www.voiceglue.org/about/features/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>33</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>VoiceGlue &gt;&gt; INSTALL [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voiceglue.org/documentation/install/">http://www.voiceglue.org/documentation/install/</ulink></releaseinfo>
                <date>13.12.2007</date>
            </biblioentry>
            <biblioentry>
                <abbrev>34</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>VoiceGlue &gt;&gt; Unsupported [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voiceglue.org/documentation/unsupported/">http://www.voiceglue.org/documentation/unsupported/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>35</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>VoiceGlue &gt;&gt; Project Goals [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.voiceglue.org/about/goals/">http://www.voiceglue.org/about/goals/</ulink></releaseinfo>
            </biblioentry>
            <biblioentry>
                <abbrev>36</abbrev>
                <author>
                    <surname>VoiceGlue</surname>
                </author>
                <title>Voiceglue Architecture on Flickr - Photo Sharing!
                [online]</title>
                <publisher>
                    <publishername>VoiceGlue</publishername>
                </publisher>
                <pubdate>2007</pubdate>
                <releaseinfo><ulink
                    url="http://www.flickr.com/photos/ampersmith/1865191372/">http://www.flickr.com/photos/ampersmith/1865191372/</ulink></releaseinfo>
            </biblioentry>
        </bibliodiv>
    </bibliography>
    <index></index>
</book>